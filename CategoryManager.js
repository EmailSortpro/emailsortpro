// CategoryManager.js - Version 21.0 - D√©tection marketing am√©lior√©e

class CategoryManager {
    constructor() {
        this.categories = {};
        this.weightedKeywords = {};
        this.customCategories = {};
        this.settings = this.loadSettings();
        this.isInitialized = false;
        this.debugMode = false;
        this.eventListenersSetup = false;
        
        // Syst√®me de synchronisation renforc√©
        this.syncQueue = [];
        this.syncInProgress = false;
        this.changeListeners = new Set();
        this.lastSyncTimestamp = 0;
        
        this.initializeCategories();
        this.loadCustomCategories();
        this.initializeWeightedDetection();
        this.initializeFilters();
        this.setupEventListeners();
        
        // D√©marrer la synchronisation automatique
        this.startAutoSync();
        
        console.log('[CategoryManager] ‚úÖ Version 21.0 - D√©tection marketing am√©lior√©e');
    }

    // ================================================
    // INITIALISATION DES CAT√âGORIES
    // ================================================
    initializeCategories() {
        this.categories = {
            // PRIORIT√â MAXIMALE - MARKETING & NEWS
            marketing_news: {
                name: 'Marketing & News',
                icon: 'üì∞',
                color: '#8b5cf6',
                description: 'Newsletters et promotions',
                priority: 150, // Augment√© pour priorit√© maximale
                isCustom: false
            },
            
            // CAT√âGORIE CC - PRIORIT√â √âLEV√âE
            cc: {
                name: 'En Copie',
                icon: 'üìã',
                color: '#64748b',
                description: 'Emails o√π vous √™tes en copie',
                priority: 90,
                isCustom: false
            },
            
            // PRIORIT√â NORMALE
            security: {
                name: 'S√©curit√©',
                icon: 'üîí',
                color: '#991b1b',
                description: 'Alertes de s√©curit√©, connexions et authentification',
                priority: 50,
                isCustom: false
            },
            
            finance: {
                name: 'Finance',
                icon: 'üí∞',
                color: '#dc2626',
                description: 'Factures et paiements',
                priority: 50,
                isCustom: false
            },
            
            tasks: {
                name: 'Actions Requises',
                icon: '‚úÖ',
                color: '#ef4444',
                description: 'T√¢ches √† faire et demandes d\'action',
                priority: 50,
                isCustom: false
            },
            
            commercial: {
                name: 'Commercial',
                icon: 'üíº',
                color: '#059669',
                description: 'Opportunit√©s, devis et contrats',
                priority: 50,
                isCustom: false
            },
            
            meetings: {
                name: 'R√©unions',
                icon: 'üìÖ',
                color: '#f59e0b',
                description: 'Invitations et demandes de r√©union',
                priority: 50,
                isCustom: false
            },
            
            support: {
                name: 'Support',
                icon: 'üõ†Ô∏è',
                color: '#f59e0b',
                description: 'Tickets et assistance',
                priority: 50,
                isCustom: false
            },
            
            reminders: {
                name: 'Relances',
                icon: 'üîÑ',
                color: '#10b981',
                description: 'Rappels et suivis',
                priority: 50,
                isCustom: false
            },
            
            project: {
                name: 'Projets',
                icon: 'üìä',
                color: '#3b82f6',
                description: 'Gestion de projet',
                priority: 50,
                isCustom: false
            },
            
            hr: {
                name: 'RH',
                icon: 'üë•',
                color: '#10b981',
                description: 'Ressources humaines',
                priority: 50,
                isCustom: false
            },
            
            internal: {
                name: 'Communication Interne',
                icon: 'üì¢',
                color: '#0ea5e9',
                description: 'Annonces internes',
                priority: 50,
                isCustom: false
            },
            
            notifications: {
                name: 'Notifications',
                icon: 'üîî',
                color: '#94a3b8',
                description: 'Notifications automatiques',
                priority: 40, // R√©duit pour laisser la priorit√© aux autres
                isCustom: false
            }
        };
        
        this.isInitialized = true;
    }

    // ================================================
    // INITIALISATION DES MOTS-CL√âS AM√âLIOR√âE
    // ================================================
    initializeWeightedDetection() {
        this.weightedKeywords = {
            // PRIORIT√â MAXIMALE - MARKETING & NEWS
            marketing_news: {
                absolute: [
                    // Patterns de d√©sabonnement classiques
                    'se d√©sinscrire', 'se desinscrire', 'd√©sinscrire', 'desinscrire',
                    'unsubscribe', 'opt out', 'opt-out', 'd√©sabonner', 'desabonner',
                    'g√©rer vos pr√©f√©rences', 'g√©rer la r√©ception', 'g√©rer mes pr√©f√©rences',
                    'email preferences', 'pr√©f√©rences email', 'preferences email',
                    'ne plus recevoir', 'stop emails', 'arreter les emails',
                    'vous ne souhaitez plus recevoir', 'ne souhaitez plus recevoir',
                    'param√©trez vos choix', 'parametrez vos choix',
                    
                    // NOUVEAU: Patterns "clique-ici" pour d√©sabonnement
                    'clique-ici pour ne plus recevoir',
                    'clique ici pour ne plus recevoir',
                    'cliquez-ici pour ne plus recevoir',
                    'cliquez ici pour ne plus recevoir',
                    'clique-ici pour vous d√©sinscrire',
                    'clique ici pour vous d√©sinscrire',
                    'cliquez-ici pour vous d√©sinscrire',
                    'cliquez ici pour vous d√©sinscrire',
                    'si tu ne souhaites plus recevoir',
                    'si vous ne souhaitez plus recevoir',
                    ', clique-ici',
                    ', clique ici',
                    ', cliquez-ici',
                    ', cliquez ici',
                    
                    // Patterns newsletters et marketing
                    'newsletter', 'mailing list', 'mailing',
                    'this email was sent to', 'you are receiving this',
                    'limited offer', 'offre limit√©e', 'special offer',
                    'promotion', 'promo', 'soldes', 'vente priv√©e',
                    'ventes en ligne', 'vente en ligne', 'shopping',
                    
                    // Patterns de notifications marketing
                    'disable these notifications', 'turn off notifications',
                    'manage notifications', 'notification settings',
                    'email settings', 'communication preferences',
                    'update your preferences', 'modify your subscription',
                    
                    // Patterns sp√©ciaux pour domaines marketing
                    'no-reply@news.', 'noreply@news.',
                    'no-reply@marketing.', 'noreply@marketing.',
                    'no-reply@info.', 'noreply@info.',
                    
                    // Hashtags marketing
                    '#fitnesspark', '#fitness', 'suis-nous sur',
                    'partage tes photos', 'follow us'
                ],
                strong: [
                    'promo', 'deal', 'offer', 'sale', 'discount', 'r√©duction',
                    'newsletter', 'mailing', 'campaign', 'marketing',
                    'exclusive', 'special', 'limited', 'new', 'nouveau',
                    'boutique', 'shopping', 'acheter', 'commander',
                    'offre', 'promotion', 'remise', 'solde',
                    'notifications', 'alerts', 'updates', 'subscribe',
                    'informations de notre part', 'recevoir nos',
                    'app', 'application mobile', 't√©l√©charge'
                ],
                weak: [
                    'update', 'discover', 'new', 'nouveaut√©', 'd√©couvrir',
                    'rappel', 'reminder', 'info', 'information'
                ],
                exclusions: []
            },

            security: {
                absolute: [
                    'alerte de connexion', 'alert connexion', 'nouvelle connexion',
                    'activit√© suspecte', 'suspicious activity', 'login alert',
                    'new sign-in', 'sign in detected', 'connexion d√©tect√©e',
                    'code de v√©rification', 'verification code', 'security code',
                    'two-factor', '2fa', 'authentification', 'authentication',
                    'password reset', 'r√©initialisation mot de passe',
                    'tentative de fraude', 'phishing', 'hame√ßonnage'
                ],
                strong: [
                    's√©curit√©', 'security', 'v√©rification', 'verify',
                    'authentification', 'password', 'mot de passe',
                    'fraude', 'arnaque', 'scam', 'phishing'
                ],
                weak: ['compte', 'account', 'acc√®s'],
                exclusions: ['newsletter', 'unsubscribe', 'promotion', 'clique-ici', 'clique ici']
            },

            tasks: {
                absolute: [
                    'action required', 'action requise', 'action needed',
                    'please complete', 'veuillez compl√©ter', 'to do',
                    'task assigned', 't√¢che assign√©e', 'deadline',
                    'due date', '√©ch√©ance', 'livrable',
                    'urgence', 'urgent', 'tr√®s urgent',
                    'demande update', 'update request', 'mise √† jour demand√©e',
                    'demande de mise √† jour', 'update needed', 'mise a jour requise',
                    'correction requise', '√† corriger', 'please review',
                    'merci de valider', 'validation requise', 'approval needed'
                ],
                strong: [
                    'urgent', 'asap', 'priority', 'priorit√©',
                    'complete', 'compl√©ter', 'action', 'faire',
                    'update', 'mise √† jour', 'demande', 'request',
                    'task', 't√¢che', 'todo', '√† faire',
                    'correction', 'corriger', 'modifier', 'r√©vision'
                ],
                weak: ['demande', 'besoin', 'attente', 'request', 'need', 'waiting'],
                exclusions: [
                    'newsletter', 'marketing', 'promotion', 'unsubscribe', 
                    'clique-ici', 'clique ici', 'cliquez-ici', 'cliquez ici',
                    'd√©sinscrire', 'desinscrire', 'ne plus recevoir',
                    'informations de notre part', 'no-reply@news'
                ]
            },

            meetings: {
                absolute: [
                    'demande de r√©union', 'meeting request', 'r√©union',
                    'schedule a meeting', 'planifier une r√©union',
                    'invitation r√©union', 'meeting invitation',
                    'teams meeting', 'zoom meeting', 'google meet',
                    'rendez-vous', 'appointment', 'rdv'
                ],
                strong: [
                    'meeting', 'r√©union', 'schedule', 'planifier',
                    'calendar', 'calendrier', 'appointment', 'agenda',
                    'conf√©rence', 'conference', 'call'
                ],
                weak: ['pr√©sentation', 'agenda', 'disponible', 'available'],
                exclusions: ['newsletter', 'promotion', 'marketing', 'clique-ici', 'd√©sinscrire']
            },

            commercial: {
                absolute: [
                    'devis', 'quotation', 'proposal', 'proposition',
                    'contrat', 'contract', 'bon de commande',
                    'purchase order', 'offre commerciale',
                    'opportunity', 'opportunit√©', 'lead'
                ],
                strong: [
                    'client', 'customer', 'prospect', 'opportunity',
                    'commercial', 'business', 'march√©', 'deal',
                    'vente', 'sales', 'n√©gociation'
                ],
                weak: ['offre', 'n√©gociation', 'discussion', 'projet'],
                exclusions: [
                    'newsletter', 'marketing', 'promotion', 'unsubscribe', 
                    'ventes en ligne', 'clique-ici', 'd√©sinscrire'
                ]
            },

            finance: {
                absolute: [
                    'facture', 'invoice', 'payment', 'paiement',
                    'virement', 'transfer', 'remboursement', 'refund',
                    'relev√© bancaire', 'bank statement',
                    'd√©claration fiscale', 'tax declaration',
                    'n¬∞commande', 'num√©ro commande', 'order number',
                    'num√©ro de commande', 'commande n¬∞', 'commande num√©ro',
                    'livraison commande', 'commande exp√©di√©e',
                    'confirmation commande', 'order confirmation'
                ],
                strong: [
                    'montant', 'amount', 'total', 'facture',
                    'fiscal', 'bancaire', 'bank', 'finance',
                    'commande', 'order', 'achat', 'vente',
                    'livraison', 'delivery', 'exp√©dition', 'shipping',
                    'prix', 'price', 'co√ªt', 'cost'
                ],
                weak: ['euro', 'dollar', 'prix', 'payment', 'transaction'],
                exclusions: [
                    'newsletter', 'marketing', 'spam', 'promotion', 
                    'soldes', 'ventes en ligne', 'clique-ici', 'd√©sinscrire'
                ]
            },

            project: {
                absolute: [
                    'projet xx', 'project update', 'milestone',
                    'sprint', 'livrable projet', 'gantt',
                    'avancement projet', 'project status',
                    'kickoff', 'retrospective', 'roadmap',
                    'document corrig√©', 'version corrig√©e', 'corrections apport√©es'
                ],
                strong: [
                    'projet', 'project', 'milestone', 'sprint',
                    'agile', 'scrum', 'kanban', 'jira',
                    'development', 'd√©veloppement',
                    'document', 'pr√©sentation', 'correction'
                ],
                weak: ['development', 'phase', '√©tape', 'planning', 'pr√©sentation'],
                exclusions: ['newsletter', 'marketing', 'promotion', 'clique-ici', 'd√©sinscrire']
            },

            reminders: {
                absolute: [
                    'reminder:', 'rappel:', 'follow up', 'relance',
                    'gentle reminder', 'rappel amical', 'following up',
                    'je reviens vers vous', 'circling back',
                    'comme convenu', 'as discussed'
                ],
                strong: [
                    'reminder', 'rappel', 'follow', 'relance',
                    'suite', 'convenu', 'discussed', 'pending'
                ],
                weak: ['previous', 'discussed', 'encore', 'still'],
                exclusions: [
                    'newsletter', 'marketing', 'promotion', 
                    'clique-ici', 'd√©sinscrire', 'informations de notre part'
                ]
            },

            support: {
                absolute: [
                    'ticket #', 'ticket number', 'num√©ro de ticket',
                    'case #', 'case number', 'incident #',
                    'probl√®me r√©solu', 'issue resolved',
                    'support ticket', 'demande de support'
                ],
                strong: [
                    'support', 'assistance', 'help desk',
                    'technical support', 'ticket', 'incident',
                    'probl√®me', 'problem', 'issue'
                ],
                weak: ['help', 'aide', 'issue', 'question'],
                exclusions: ['newsletter', 'marketing', 'promotion', 'clique-ici']
            },

            hr: {
                absolute: [
                    'bulletin de paie', 'payslip', 'contrat de travail',
                    'cong√©s', 'leave request', 'onboarding',
                    'entretien annuel', 'performance review',
                    'ressources humaines', 'human resources',
                    'offre d\'emploi', 'job offer', 'recrutement',
                    'votre candidature', 'your application',
                    'suite favorable', 'suite d√©favorable'
                ],
                strong: [
                    'rh', 'hr', 'salaire', 'salary',
                    'ressources humaines', 'human resources',
                    'contrat', 'paie', 'cong√©s', 'vacation',
                    'emploi', 'job', 'recruitment',
                    'candidature', 'application', 'recrutement'
                ],
                weak: ['employee', 'staff', 'personnel', '√©quipe'],
                exclusions: [
                    'newsletter', 'marketing', 'famille', 'family', 
                    'personnel', 'personal', 'clique-ici', 'd√©sinscrire'
                ]
            },

            internal: {
                absolute: [
                    'all staff', 'tout le personnel', 'annonce interne',
                    'company announcement', 'memo interne',
                    'communication interne', 'note de service',
                    '√† tous', 'to all employees'
                ],
                strong: [
                    'internal', 'interne', 'company wide',
                    'personnel', 'staff', '√©quipe',
                    'annonce', 'announcement'
                ],
                weak: ['annonce', 'announcement', 'information', 'update'],
                exclusions: ['newsletter', 'marketing', 'external', 'client', 'clique-ici']
            },

            notifications: {
                absolute: [
                    'do not reply', 'ne pas r√©pondre', 'noreply@',
                    'automated message', 'notification automatique',
                    'system notification', 'ceci est un message automatique',
                    'no-reply@', 'donotreply@'
                ],
                strong: [
                    'automated', 'automatic', 'system',
                    'notification', 'automatique', 'alert'
                ],
                weak: ['notification', 'alert', 'info'],
                exclusions: [
                    'newsletter', 'marketing', 'urgent', 
                    'clique-ici', 'd√©sinscrire', 'unsubscribe',
                    'informations de notre part'
                ]
            },

            cc: {
                absolute: [
                    'copie pour information', 'for your information', 'fyi',
                    'en copie', 'in copy', 'cc:', 'courtesy copy',
                    'pour info', 'pour information'
                ],
                strong: ['information', 'copie', 'copy', 'cc'],
                weak: ['fyi', 'info'],
                exclusions: [
                    'commande', 'order', 'facture', 'invoice',
                    'urgent', 'action required', 'payment'
                ]
            }
        };

        console.log('[CategoryManager] Mots-cl√©s v21.0 initialis√©s - D√©tection marketing renforc√©e');
    }

    // ================================================
    // ANALYSE EMAIL AM√âLIOR√âE
    // ================================================
    analyzeEmail(email) {
        if (!email) return { category: 'other', score: 0, confidence: 0 };
        
        if (this.shouldExcludeSpam() && this.isSpamEmail(email)) {
            return { category: 'spam', score: 0, confidence: 0, isSpam: true };
        }
        
        const content = this.extractCompleteContent(email);
        
        // Log de debug pour les emails marketing
        if (this.debugMode && content.text.includes('clique')) {
            console.log('[CategoryManager] üîç Email avec "clique" d√©tect√©:', {
                subject: email.subject?.substring(0, 50),
                from: email.from?.emailAddress?.address,
                hasClickHere: content.text.includes('clique-ici') || content.text.includes('clique ici')
            });
        }
        
        // V√©rifier les exclusions globales
        if (this.isGloballyExcluded(content, email)) {
            return { category: 'excluded', score: 0, confidence: 0, isExcluded: true };
        }
        
        // D√©tecter les emails familiaux/personnels AVANT tout
        if (this.isPersonalEmail(content, email)) {
            if (this.categories.personal || this.customCategories.personal) {
                return {
                    category: 'personal',
                    score: 100,
                    confidence: 0.95,
                    matchedPatterns: [{ keyword: 'personal_email_detected', type: 'absolute', score: 100 }],
                    hasAbsolute: true,
                    isPersonal: true
                };
            } else {
                return { category: 'excluded', score: 0, confidence: 0, isExcluded: true, reason: 'personal' };
            }
        }
        
        // NOUVEAU: V√©rification prioritaire pour marketing_news
        const marketingCheck = this.checkMarketingPatterns(content, email);
        if (marketingCheck.isMarketing) {
            return {
                category: 'marketing_news',
                score: marketingCheck.score,
                confidence: marketingCheck.confidence,
                matchedPatterns: marketingCheck.patterns,
                hasAbsolute: true,
                marketingType: marketingCheck.type
            };
        }
        
        // V√©rifier si on est destinataire principal ou en CC
        const isMainRecipient = this.isMainRecipient(email);
        const isInCC = this.isInCC(email);
        
        // Si on est en CC
        if (this.shouldDetectCC() && isInCC && !isMainRecipient) {
            const allResults = this.analyzeAllCategories(content);
            const bestNonCC = Object.values(allResults)
                .filter(r => r.category !== 'cc')
                .sort((a, b) => b.score - a.score)[0];
            
            if (bestNonCC && bestNonCC.score >= 100 && bestNonCC.hasAbsolute) {
                return {
                    category: bestNonCC.category,
                    score: bestNonCC.score,
                    confidence: bestNonCC.confidence,
                    matchedPatterns: bestNonCC.matches,
                    hasAbsolute: bestNonCC.hasAbsolute,
                    isCC: true
                };
            }
            
            return {
                category: 'cc',
                score: 100,
                confidence: 0.95,
                matchedPatterns: [{ keyword: 'email_in_cc', type: 'detected', score: 100 }],
                hasAbsolute: true,
                isCC: true
            };
        }
        
        const allResults = this.analyzeAllCategories(content);
        const selectedResult = this.selectByPriorityWithThreshold(allResults);
        
        // Si aucune cat√©gorie trouv√©e, retourner explicitement 'other'
        if (!selectedResult || selectedResult.category === 'other' || selectedResult.score === 0) {
            return {
                category: 'other',
                score: 0,
                confidence: 0,
                matchedPatterns: [],
                hasAbsolute: false,
                reason: 'no_category_matched'
            };
        }
        
        return selectedResult;
    }

    // ================================================
    // NOUVELLE M√âTHODE: V√©rification marketing prioritaire
    // ================================================
    checkMarketingPatterns(content, email) {
        const text = content.text.toLowerCase();
        const from = email.from?.emailAddress?.address?.toLowerCase() || '';
        
        // Patterns de d√©sabonnement sp√©ciaux
        const unsubscribePatterns = [
            /si tu ne souhaites plus recevoir.*clique[- ]?ici/,
            /si vous ne souhaitez plus recevoir.*clique[z]?[- ]?ici/,
            /ne plus recevoir.*clique[z]?[- ]?ici/,
            /clique[z]?[- ]?ici.*pour.*d√©sinscrire/,
            /clique[z]?[- ]?ici.*pour.*d√©sabonner/,
            /clique[z]?[- ]?ici.*pour ne plus recevoir/,
            /informations de notre part.*clique[z]?[- ]?ici/,
            /d√©sinscrire.*clique[z]?[- ]?ici/,
            /unsubscribe.*click[- ]?here/
        ];
        
        // V√©rifier les patterns de d√©sabonnement
        for (const pattern of unsubscribePatterns) {
            if (pattern.test(text)) {
                return {
                    isMarketing: true,
                    score: 200,
                    confidence: 0.95,
                    type: 'unsubscribe_pattern',
                    patterns: [{
                        keyword: pattern.source,
                        type: 'absolute',
                        score: 200
                    }]
                };
            }
        }
        
        // V√©rifier les domaines marketing
        const marketingDomains = [
            'no-reply@news.',
            'noreply@news.',
            'no-reply@marketing.',
            'noreply@marketing.',
            'no-reply@info.',
            'newsletter@',
            '@mailchimp',
            '@sendinblue',
            '@mailjet'
        ];
        
        for (const domain of marketingDomains) {
            if (from.includes(domain)) {
                return {
                    isMarketing: true,
                    score: 150,
                    confidence: 0.9,
                    type: 'marketing_domain',
                    patterns: [{
                        keyword: `domain:${domain}`,
                        type: 'absolute',
                        score: 150
                    }]
                };
            }
        }
        
        // V√©rifier les mots-cl√©s marketing absolus
        const marketingKeywords = this.weightedKeywords.marketing_news;
        const score = this.calculateScore(content, marketingKeywords, 'marketing_news');
        
        if (score.hasAbsolute || score.total >= 100) {
            return {
                isMarketing: true,
                score: score.total,
                confidence: this.calculateConfidence(score),
                type: 'keywords',
                patterns: score.matches
            };
        }
        
        return { isMarketing: false };
    }

    // ================================================
    // CALCUL DE SCORE AM√âLIOR√â
    // ================================================
    calculateScore(content, keywords, categoryId) {
        let totalScore = 0;
        let hasAbsolute = false;
        const matches = [];
        const text = content.text;
        
        // Bonus sp√©cial pour marketing_news si domaine marketing
        if (categoryId === 'marketing_news') {
            const from = content.domain;
            if (from.includes('news') || from.includes('marketing') || from.includes('newsletter')) {
                totalScore += 50;
                matches.push({ keyword: `marketing_domain:${from}`, type: 'domain', score: 50 });
            }
        }
        
        // Test des exclusions en premier
        if (keywords.exclusions && keywords.exclusions.length > 0) {
            for (const exclusion of keywords.exclusions) {
                if (this.findInText(text, exclusion)) {
                    totalScore -= 50;
                    matches.push({ keyword: exclusion, type: 'exclusion', score: -50 });
                }
            }
        }
        
        // Test des mots-cl√©s absolus
        if (keywords.absolute && keywords.absolute.length > 0) {
            for (const keyword of keywords.absolute) {
                if (this.findInText(text, keyword)) {
                    totalScore += 100;
                    hasAbsolute = true;
                    matches.push({ keyword, type: 'absolute', score: 100 });
                    
                    // Bonus suppl√©mentaire si dans le sujet
                    if (content.subject && this.findInText(content.subject, keyword)) {
                        totalScore += 50;
                        matches.push({ keyword: keyword + ' (in subject)', type: 'bonus', score: 50 });
                    }
                }
            }
        }
        
        // Test des mots-cl√©s forts
        if (keywords.strong && keywords.strong.length > 0) {
            let strongMatches = 0;
            for (const keyword of keywords.strong) {
                if (this.findInText(text, keyword)) {
                    totalScore += 40;
                    strongMatches++;
                    matches.push({ keyword, type: 'strong', score: 40 });
                    
                    // Bonus si dans le sujet
                    if (content.subject && this.findInText(content.subject, keyword)) {
                        totalScore += 20;
                        matches.push({ keyword: keyword + ' (in subject)', type: 'bonus', score: 20 });
                    }
                }
            }
            
            // Bonus si plusieurs mots-cl√©s forts matchent
            if (strongMatches >= 2) {
                totalScore += 30;
                matches.push({ keyword: 'multiple_strong_matches', type: 'bonus', score: 30 });
            }
        }
        
        // Test des mots-cl√©s faibles
        if (keywords.weak && keywords.weak.length > 0) {
            let weakMatches = 0;
            for (const keyword of keywords.weak) {
                if (this.findInText(text, keyword)) {
                    totalScore += 15;
                    weakMatches++;
                    matches.push({ keyword, type: 'weak', score: 15 });
                }
            }
            
            // Bonus si beaucoup de mots faibles matchent
            if (weakMatches >= 3) {
                totalScore += 20;
                matches.push({ keyword: 'multiple_weak_matches', type: 'bonus', score: 20 });
            }
        }
        
        return { 
            total: Math.max(0, totalScore), 
            hasAbsolute, 
            matches 
        };
    }

    // ================================================
    // M√âTHODE FINDTEXT AM√âLIOR√âE
    // ================================================
    findInText(text, keyword) {
        if (!text || !keyword) return false;
        
        // Normalisation compl√®te
        const normalizedText = text.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/[√©√®√™√´√â√à√ä√ã]/gi, 'e')
            .replace(/[√†√¢√§√Ä√Ç√Ñ]/gi, 'a')
            .replace(/[√π√ª√º√ô√õ√ú]/gi, 'u')
            .replace(/[√ß√á]/gi, 'c')
            .replace(/[√Æ√Ø√é√è]/gi, 'i')
            .replace(/[√¥√∂√î√ñ]/gi, 'o')
            .replace(/['']/g, "'")
            .replace(/\s+/g, ' ')
            .trim();
        
        const normalizedKeyword = keyword.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/[√©√®√™√´√â√à√ä√ã]/gi, 'e')
            .replace(/[√†√¢√§√Ä√Ç√Ñ]/gi, 'a')
            .replace(/[√π√ª√º√ô√õ√ú]/gi, 'u')
            .replace(/[√ß√á]/gi, 'c')
            .replace(/[√Æ√Ø√é√è]/gi, 'i')
            .replace(/[√¥√∂√î√ñ]/gi, 'o')
            .replace(/['']/g, "'")
            .replace(/\s+/g, ' ')
            .trim();
        
        // Recherche directe
        return normalizedText.includes(normalizedKeyword);
    }

    // ================================================
    // S√âLECTION PAR PRIORIT√â AM√âLIOR√âE
    // ================================================
    selectByPriorityWithThreshold(results) {
        const MIN_SCORE_THRESHOLD = 30;
        const MIN_CONFIDENCE_THRESHOLD = 0.5;
        
        const sortedResults = Object.values(results)
            .filter(r => r.score >= MIN_SCORE_THRESHOLD && r.confidence >= MIN_CONFIDENCE_THRESHOLD)
            .sort((a, b) => {
                // Si un a un match absolu et pas l'autre, privil√©gier celui avec absolu
                if (a.hasAbsolute && !b.hasAbsolute) return -1;
                if (!a.hasAbsolute && b.hasAbsolute) return 1;
                
                // Priorit√© d'abord
                if (a.priority !== b.priority) {
                    return b.priority - a.priority;
                }
                
                // Puis score
                return b.score - a.score;
            });
        
        if (this.debugMode) {
            console.log('[CategoryManager] üìä Scores par cat√©gorie:');
            sortedResults.forEach(r => {
                console.log(`  - ${r.category}: ${r.score}pts (priority: ${r.priority}, confidence: ${r.confidence}, hasAbsolute: ${r.hasAbsolute})`);
            });
        }
        
        const bestResult = sortedResults[0];
        
        if (bestResult) {
            console.log(`[CategoryManager] ‚úÖ Cat√©gorie s√©lectionn√©e: ${bestResult.category} (${bestResult.score}pts, ${Math.round(bestResult.confidence * 100)}%)`);
            return {
                category: bestResult.category,
                score: bestResult.score,
                confidence: bestResult.confidence,
                matchedPatterns: bestResult.matches,
                hasAbsolute: bestResult.hasAbsolute
            };
        }
        
        // Fallback
        const allSorted = Object.values(results)
            .filter(r => r.score > 0)
            .sort((a, b) => b.score - a.score);
        
        if (allSorted.length > 0 && allSorted[0].score >= 20 && allSorted[0].confidence >= 0.4) {
            const fallback = allSorted[0];
            console.log(`[CategoryManager] üìå Utilisation fallback: ${fallback.category} (${fallback.score}pts, ${Math.round(fallback.confidence * 100)}%)`);
            return {
                category: fallback.category,
                score: fallback.score,
                confidence: fallback.confidence,
                matchedPatterns: fallback.matches,
                hasAbsolute: fallback.hasAbsolute
            };
        }
        
        console.log('[CategoryManager] üìå Aucune cat√©gorie correspondante, classification "other"');
        return {
            category: 'other',
            score: 0,
            confidence: 0,
            matchedPatterns: [],
            hasAbsolute: false,
            reason: 'below_threshold'
        };
    }

    // ================================================
    // Le reste du code reste identique
    // ================================================
    
    // [Copier ici tout le reste du code de CategoryManager depuis startAutoSync() jusqu'√† la fin]
    // Je ne recopie pas tout pour √©conomiser de l'espace, mais toutes les autres m√©thodes
    // restent identiques √† la version 20.0
    
    startAutoSync() {
        // Synchronisation automatique toutes les 2 secondes
        setInterval(() => {
            this.processSettingsChanges();
        }, 2000);
        
        // Synchronisation imm√©diate lors des changements
        this.setupImmediateSync();
    }

    setupImmediateSync() {
        // √âcouter les changements dans localStorage
        window.addEventListener('storage', (e) => {
            if (e.key === 'categorySettings') {
                console.log('[CategoryManager] üîÑ Changement localStorage d√©tect√©');
                this.reloadSettingsFromStorage();
                this.notifyAllModules('storageChange');
            }
        });
    }

    processSettingsChanges() {
        if (this.syncInProgress || this.syncQueue.length === 0) return;
        
        this.syncInProgress = true;
        
        try {
            while (this.syncQueue.length > 0) {
                const change = this.syncQueue.shift();
                this.applySettingChange(change);
            }
            
            this.lastSyncTimestamp = Date.now();
            
        } catch (error) {
            console.error('[CategoryManager] Erreur sync queue:', error);
        } finally {
            this.syncInProgress = false;
        }
    }

    applySettingChange(change) {
        const { type, value, notifyModules } = change;
        
        console.log(`[CategoryManager] üìù Application changement: ${type}`, value);
        
        // Appliquer le changement dans les settings locaux
        switch (type) {
            case 'taskPreselectedCategories':
                this.settings.taskPreselectedCategories = [...value];
                break;
            case 'activeCategories':
                this.settings.activeCategories = value;
                break;
            case 'categoryExclusions':
                this.settings.categoryExclusions = { ...this.settings.categoryExclusions, ...value };
                break;
            case 'scanSettings':
                this.settings.scanSettings = { ...this.settings.scanSettings, ...value };
                break;
            case 'automationSettings':
                this.settings.automationSettings = { ...this.settings.automationSettings, ...value };
                break;
            case 'preferences':
                this.settings.preferences = { ...this.settings.preferences, ...value };
                break;
            default:
                this.settings = { ...this.settings, ...value };
        }
        
        // Sauvegarder imm√©diatement
        this.saveSettingsToStorage();
        
        // Notifier les modules si demand√©
        if (notifyModules !== false) {
            this.notifySpecificModules(type, value);
            this.notifyAllModules(type, value);
        }
    }

    notifySpecificModules(type, value) {
        console.log(`[CategoryManager] üì¢ Notification sp√©cialis√©e: ${type}`);
        
        // EmailScanner - PRIORIT√â ABSOLUE
        if (window.emailScanner) {
            switch (type) {
                case 'taskPreselectedCategories':
                    console.log('[CategoryManager] ‚Üí EmailScanner: taskPreselectedCategories');
                    if (typeof window.emailScanner.updateTaskPreselectedCategories === 'function') {
                        window.emailScanner.updateTaskPreselectedCategories(value);
                    }
                    setTimeout(() => {
                        if (window.emailScanner.emails && window.emailScanner.emails.length > 0) {
                            console.log('[CategoryManager] ‚Üí EmailScanner: D√©clenchement re-cat√©gorisation');
                            window.emailScanner.recategorizeEmails?.();
                        }
                    }, 100);
                    break;
                    
                case 'activeCategories':
                    console.log('[CategoryManager] ‚Üí EmailScanner: activeCategories');
                    if (typeof window.emailScanner.updateSettings === 'function') {
                        window.emailScanner.updateSettings({ activeCategories: value });
                    }
                    setTimeout(() => {
                        if (window.emailScanner.emails && window.emailScanner.emails.length > 0) {
                            window.emailScanner.recategorizeEmails?.();
                        }
                    }, 100);
                    break;
                    
                case 'categoryExclusions':
                case 'preferences':
                    if (typeof window.emailScanner.updateSettings === 'function') {
                        window.emailScanner.updateSettings({ [type]: value });
                    }
                    break;
            }
        }
        
        // AITaskAnalyzer
        if (window.aiTaskAnalyzer) {
            if (type === 'taskPreselectedCategories') {
                console.log('[CategoryManager] ‚Üí AITaskAnalyzer: taskPreselectedCategories');
                if (typeof window.aiTaskAnalyzer.updatePreselectedCategories === 'function') {
                    window.aiTaskAnalyzer.updatePreselectedCategories(value);
                }
            }
            if (type === 'automationSettings') {
                console.log('[CategoryManager] ‚Üí AITaskAnalyzer: automationSettings');
                if (typeof window.aiTaskAnalyzer.updateAutomationSettings === 'function') {
                    window.aiTaskAnalyzer.updateAutomationSettings(value);
                }
            }
        }
        
        // StartScan/MinimalScanModule
        if (window.minimalScanModule || window.scanStartModule) {
            const scanner = window.minimalScanModule || window.scanStartModule;
            if (type === 'taskPreselectedCategories' || type === 'scanSettings') {
                console.log('[CategoryManager] ‚Üí ScanModule:', type);
                if (typeof scanner.updateSettings === 'function') {
                    scanner.updateSettings({ [type]: value });
                }
            }
        }
        
        // PageManager
        if (window.pageManager) {
            console.log('[CategoryManager] ‚Üí PageManager:', type);
            if (typeof window.pageManager.handleSettingsChanged === 'function') {
                window.pageManager.handleSettingsChanged({ settings: this.settings });
            }
        }
    }

    notifyAllModules(type, value) {
        // Dispatch √©v√©nements globaux
        setTimeout(() => {
            this.dispatchEvent('categorySettingsChanged', { 
                settings: this.settings,
                type,
                value,
                timestamp: Date.now()
            });
            
            this.dispatchEvent('settingsChanged', { 
                type, 
                value,
                source: 'CategoryManager',
                timestamp: Date.now()
            });
        }, 10);
        
        // Notifier les listeners enregistr√©s
        this.changeListeners.forEach(listener => {
            try {
                listener(type, value, this.settings);
            } catch (error) {
                console.error('[CategoryManager] Erreur listener:', error);
            }
        });
    }

    updateSettings(newSettings, notifyModules = true) {
        console.log('[CategoryManager] üìù updateSettings appel√©:', newSettings);
        
        // Ajouter √† la queue de synchronisation
        this.syncQueue.push({
            type: 'fullSettings',
            value: newSettings,
            notifyModules,
            timestamp: Date.now()
        });
        
        // Traitement imm√©diat si pas en cours
        if (!this.syncInProgress) {
            this.processSettingsChanges();
        }
    }

    updateTaskPreselectedCategories(categories, notifyModules = true) {
        console.log('[CategoryManager] üìã updateTaskPreselectedCategories:', categories);
        
        const normalizedCategories = Array.isArray(categories) ? [...categories] : [];
        
        // Invalider le cache
        this.invalidateTaskCategoriesCache();
        
        this.syncQueue.push({
            type: 'taskPreselectedCategories',
            value: normalizedCategories,
            notifyModules,
            timestamp: Date.now()
        });
        
        if (!this.syncInProgress) {
            this.processSettingsChanges();
        }
        
        return normalizedCategories;
    }

    updateActiveCategories(categories, notifyModules = true) {
        console.log('[CategoryManager] üè∑Ô∏è updateActiveCategories:', categories);
        
        this.syncQueue.push({
            type: 'activeCategories',
            value: categories,
            notifyModules,
            timestamp: Date.now()
        });
        
        if (!this.syncInProgress) {
            this.processSettingsChanges();
        }
    }

    updateCategoryExclusions(exclusions, notifyModules = true) {
        console.log('[CategoryManager] üö´ updateCategoryExclusions:', exclusions);
        
        this.syncQueue.push({
            type: 'categoryExclusions',
            value: exclusions,
            notifyModules,
            timestamp: Date.now()
        });
        
        if (!this.syncInProgress) {
            this.processSettingsChanges();
        }
    }

    updatePreferences(preferences, notifyModules = true) {
        console.log('[CategoryManager] ‚öôÔ∏è updatePreferences:', preferences);
        
        this.syncQueue.push({
            type: 'preferences',
            value: preferences,
            notifyModules,
            timestamp: Date.now()
        });
        
        if (!this.syncInProgress) {
            this.processSettingsChanges();
        }
    }

    updateScanSettings(scanSettings, notifyModules = true) {
        console.log('[CategoryManager] üîç updateScanSettings:', scanSettings);
        
        this.syncQueue.push({
            type: 'scanSettings',
            value: scanSettings,
            notifyModules,
            timestamp: Date.now()
        });
        
        if (!this.syncInProgress) {
            this.processSettingsChanges();
        }
    }

    updateAutomationSettings(automationSettings, notifyModules = true) {
        console.log('[CategoryManager] ü§ñ updateAutomationSettings:', automationSettings);
        
        this.syncQueue.push({
            type: 'automationSettings',
            value: automationSettings,
            notifyModules,
            timestamp: Date.now()
        });
        
        if (!this.syncInProgress) {
            this.processSettingsChanges();
        }
    }

    loadSettings() {
        try {
            const saved = localStorage.getItem('categorySettings');
            const defaultSettings = this.getDefaultSettings();
            
            if (saved) {
                const parsedSettings = JSON.parse(saved);
                const mergedSettings = { ...defaultSettings, ...parsedSettings };
                console.log('[CategoryManager] ‚úÖ Settings charg√©s depuis localStorage');
                return mergedSettings;
            } else {
                console.log('[CategoryManager] üìù Utilisation settings par d√©faut');
                return defaultSettings;
            }
        } catch (error) {
            console.error('[CategoryManager] ‚ùå Erreur chargement param√®tres:', error);
            return this.getDefaultSettings();
        }
    }

    saveSettingsToStorage() {
        try {
            localStorage.setItem('categorySettings', JSON.stringify(this.settings));
            console.log('[CategoryManager] üíæ Settings sauvegard√©s');
        } catch (error) {
            console.error('[CategoryManager] ‚ùå Erreur sauvegarde param√®tres:', error);
        }
    }

    reloadSettingsFromStorage() {
        const oldSettings = { ...this.settings };
        this.settings = this.loadSettings();
        
        // D√©tecter les changements et notifier
        const changes = this.detectSettingsChanges(oldSettings, this.settings);
        changes.forEach(change => {
            this.notifySpecificModules(change.type, change.value);
        });
    }

    detectSettingsChanges(oldSettings, newSettings) {
        const changes = [];
        
        const criticalFields = [
            'taskPreselectedCategories',
            'activeCategories', 
            'categoryExclusions',
            'scanSettings',
            'automationSettings',
            'preferences'
        ];
        
        criticalFields.forEach(field => {
            const oldValue = JSON.stringify(oldSettings[field] || {});
            const newValue = JSON.stringify(newSettings[field] || {});
            
            if (oldValue !== newValue) {
                changes.push({
                    type: field,
                    value: newSettings[field],
                    oldValue: oldSettings[field]
                });
            }
        });
        
        return changes;
    }

    getDefaultSettings() {
        return {
            activeCategories: null, // null = toutes actives
            excludedDomains: [],
            excludedKeywords: [],
            taskPreselectedCategories: [], // VIDE par d√©faut
            categoryExclusions: {
                domains: [],
                emails: []
            },
            scanSettings: {
                defaultPeriod: 7,
                defaultFolder: 'inbox',
                autoAnalyze: true,
                autoCategrize: true
            },
            automationSettings: {
                autoCreateTasks: false,
                groupTasksByDomain: false,
                skipDuplicates: true,
                autoAssignPriority: false
            },
            preferences: {
                darkMode: false,
                compactView: false,
                showNotifications: true,
                excludeSpam: true,
                detectCC: true
            }
        };
    }

    getSettings() {
        // Toujours retourner une copie fra√Æche
        return JSON.parse(JSON.stringify(this.settings));
    }

    getTaskPreselectedCategories() {
        // V√©rifier le cache avec une dur√©e de vie de 10 secondes
        const now = Date.now();
        const CACHE_DURATION = 10000; // 10 secondes
        
        if (this._taskCategoriesCache && 
            this._taskCategoriesCacheTime && 
            (now - this._taskCategoriesCacheTime) < CACHE_DURATION) {
            // Retourner depuis le cache sans logger
            return [...this._taskCategoriesCache];
        }
        
        // R√©cup√©rer les cat√©gories fra√Æches
        const categories = this.settings.taskPreselectedCategories || [];
        
        // Mettre √† jour le cache
        this._taskCategoriesCache = [...categories];
        this._taskCategoriesCacheTime = now;
        
        // Log seulement si changement ou premi√®re fois
        if (!this._lastLoggedTaskCategories || 
            JSON.stringify(this._lastLoggedTaskCategories) !== JSON.stringify(categories)) {
            console.log('[CategoryManager] üìã Cat√©gories t√¢ches mises √† jour:', categories);
            this._lastLoggedTaskCategories = [...categories];
        }
        
        return [...categories];
    }

    invalidateTaskCategoriesCache() {
        this._taskCategoriesCache = null;
        this._taskCategoriesCacheTime = 0;
        console.log('[CategoryManager] üîÑ Cache des cat√©gories t√¢ches invalid√©');
    }

    getActiveCategories() {
        // Si activeCategories est null, toutes les cat√©gories sont actives
        if (!this.settings.activeCategories) {
            // Retourner TOUTES les cat√©gories (standard + personnalis√©es)
            const allCategories = Object.keys(this.categories);
            return allCategories;
        }
        
        // Sinon retourner seulement les cat√©gories marqu√©es comme actives
        return [...this.settings.activeCategories];
    }

    isCategoryActive(categoryId) {
        const activeCategories = this.getActiveCategories();
        return activeCategories.includes(categoryId);
    }

    getScanSettings() {
        return { ...this.settings.scanSettings };
    }

    getAutomationSettings() {
        return { ...this.settings.automationSettings };
    }

    shouldExcludeSpam() {
        return this.settings.preferences?.excludeSpam !== false;
    }

    shouldDetectCC() {
        return this.settings.preferences?.detectCC !== false;
    }

    addChangeListener(callback) {
        this.changeListeners.add(callback);
        console.log(`[CategoryManager] üëÇ Listener ajout√© (${this.changeListeners.size} total)`);
        
        // Retourner une fonction pour supprimer le listener
        return () => {
            this.changeListeners.delete(callback);
        };
    }

    removeChangeListener(callback) {
        this.changeListeners.delete(callback);
    }

    saveCustomCategories() {
        try {
            localStorage.setItem('customCategories', JSON.stringify(this.customCategories));
            console.log('[CategoryManager] Cat√©gories personnalis√©es sauvegard√©es');
        } catch (error) {
            console.error('[CategoryManager] Erreur sauvegarde cat√©gories personnalis√©es:', error);
        }
    }

    loadCustomCategories() {
        try {
            const saved = localStorage.getItem('customCategories');
            this.customCategories = saved ? JSON.parse(saved) : {};
            
            console.log('[CategoryManager] üìÅ Chargement cat√©gories personnalis√©es...');
            
            Object.entries(this.customCategories).forEach(([id, category]) => {
                // Ajouter la cat√©gorie
                this.categories[id] = {
                    ...category,
                    isCustom: true,
                    priority: category.priority || 30
                };
                
                // IMPORTANT: Charger les mots-cl√©s sauvegard√©s
                if (category.keywords) {
                    this.weightedKeywords[id] = {
                        absolute: [...(category.keywords.absolute || [])],
                        strong: [...(category.keywords.strong || [])],
                        weak: [...(category.keywords.weak || [])],
                        exclusions: [...(category.keywords.exclusions || [])]
                    };
                } else {
                    // Initialiser avec des tableaux vides
                    this.weightedKeywords[id] = {
                        absolute: [],
                        strong: [],
                        weak: [],
                        exclusions: []
                    };
                }
                
                const totalKeywords = this.getTotalKeywordsCount(id);
                console.log(`[CategoryManager] ‚úÖ Cat√©gorie personnalis√©e "${category.name}" (${id}):`);
                console.log(`  - Priorit√©: ${category.priority || 30}`);
                console.log(`  - Mots-cl√©s: ${totalKeywords}`);
                console.log(`  - Keywords object:`, this.weightedKeywords[id]);
                
                if (totalKeywords === 0) {
                    console.warn(`  ‚ö†Ô∏è AUCUN MOT-CL√â - La cat√©gorie ne pourra pas d√©tecter d'emails!`);
                }
                
                // S'assurer que la cat√©gorie est active
                if (this.settings.activeCategories === null) {
                    // Si null, toutes sont actives par d√©faut
                    console.log(`  ‚úÖ Cat√©gorie active par d√©faut`);
                } else if (Array.isArray(this.settings.activeCategories)) {
                    if (!this.settings.activeCategories.includes(id)) {
                        console.log(`  ‚ûï Ajout aux cat√©gories actives`);
                        this.settings.activeCategories.push(id);
                        this.saveSettingsToStorage();
                    }
                }
            });
            
            console.log('[CategoryManager] üìä R√©sum√©:');
            console.log('  - Cat√©gories personnalis√©es charg√©es:', Object.keys(this.customCategories).length);
            console.log('  - Total cat√©gories:', Object.keys(this.categories).length);
            
        } catch (error) {
            console.error('[CategoryManager] ‚ùå Erreur chargement cat√©gories personnalis√©es:', error);
            this.customCategories = {};
        }
    }

    getTotalKeywordsCount(categoryId) {
        const keywords = this.weightedKeywords[categoryId];
        if (!keywords) return 0;
        
        return (keywords.absolute?.length || 0) + 
               (keywords.strong?.length || 0) + 
               (keywords.weak?.length || 0) + 
               (keywords.exclusions?.length || 0);
    }

    createCustomCategory(categoryData) {
        const id = this.generateCategoryId(categoryData.name);
        
        const category = {
            id: id,
            name: categoryData.name,
            icon: categoryData.icon || 'üìÇ',
            color: categoryData.color || '#6366f1',
            description: categoryData.description || '',
            priority: categoryData.priority || 30,
            createdAt: new Date().toISOString(),
            isCustom: true,
            keywords: categoryData.keywords || { absolute: [], strong: [], weak: [], exclusions: [] }
        };

        this.customCategories[id] = category;
        this.categories[id] = category;
        
        // Initialiser les mots-cl√©s
        this.weightedKeywords[id] = {
            absolute: category.keywords.absolute || [],
            strong: category.keywords.strong || [],
            weak: category.keywords.weak || [],
            exclusions: category.keywords.exclusions || []
        };

        this.saveCustomCategories();
        
        setTimeout(() => {
            this.dispatchEvent('categoryCreated', { categoryId: id, category });
        }, 10);

        console.log('[CategoryManager] Cat√©gorie personnalis√©e cr√©√©e:', category);
        return category;
    }

    updateCustomCategory(categoryId, updates) {
        if (!this.customCategories[categoryId]) {
            throw new Error('Cat√©gorie personnalis√©e non trouv√©e');
        }

        // Mise √† jour avec pr√©servation des mots-cl√©s
        const updatedCategory = {
            ...this.customCategories[categoryId],
            ...updates,
            keywords: updates.keywords || this.customCategories[categoryId].keywords,
            updatedAt: new Date().toISOString()
        };

        this.customCategories[categoryId] = updatedCategory;
        this.categories[categoryId] = updatedCategory;
        
        // Mettre √† jour les mots-cl√©s si fournis
        if (updates.keywords) {
            this.weightedKeywords[categoryId] = {
                absolute: updates.keywords.absolute || [],
                strong: updates.keywords.strong || [],
                weak: updates.keywords.weak || [],
                exclusions: updates.keywords.exclusions || []
            };
        }

        this.saveCustomCategories();
        
        setTimeout(() => {
            this.dispatchEvent('categoryUpdated', { categoryId, category: updatedCategory });
        }, 10);

        console.log('[CategoryManager] Cat√©gorie mise √† jour:', categoryId);
        return updatedCategory;
    }

    deleteCustomCategory(categoryId) {
        if (!this.customCategories[categoryId]) {
            throw new Error('Cat√©gorie personnalis√©e non trouv√©e');
        }

        // Retirer des cat√©gories pr√©-s√©lectionn√©es si pr√©sente
        if (this.settings.taskPreselectedCategories?.includes(categoryId)) {
            const newPreselected = this.settings.taskPreselectedCategories.filter(id => id !== categoryId);
            this.updateTaskPreselectedCategories(newPreselected);
        }

        // Retirer des cat√©gories actives si pr√©sente
        if (this.settings.activeCategories?.includes(categoryId)) {
            const newActive = this.settings.activeCategories.filter(id => id !== categoryId);
            this.updateActiveCategories(newActive);
        }

        delete this.customCategories[categoryId];
        delete this.categories[categoryId];
        delete this.weightedKeywords[categoryId];

        this.saveCustomCategories();
        
        setTimeout(() => {
            this.dispatchEvent('categoryDeleted', { categoryId });
        }, 10);

        console.log('[CategoryManager] Cat√©gorie supprim√©e:', categoryId);
    }

    generateCategoryId(name) {
        const base = name.toLowerCase()
            .replace(/[√†√¢√§]/g, 'a')
            .replace(/[√©√®√™√´]/g, 'e')
            .replace(/[√Æ√Ø]/g, 'i')
            .replace(/[√¥√∂]/g, 'o')
            .replace(/[√π√ª√º]/g, 'u')
            .replace(/[√ß]/g, 'c')
            .replace(/[^a-z0-9]/g, '_')
            .replace(/_+/g, '_')
            .replace(/^_|_$/g, '');
        
        let id = 'custom_' + base;
        let counter = 1;
        
        while (this.categories[id] || this.customCategories[id]) {
            id = `custom_${base}_${counter}`;
            counter++;
        }
        
        return id;
    }

    getCustomCategories() {
        return { ...this.customCategories };
    }

    updateCategoryKeywords(categoryId, keywords) {
        if (!this.categories[categoryId]) {
            throw new Error('Cat√©gorie non trouv√©e');
        }

        console.log(`[CategoryManager] Mise √† jour mots-cl√©s pour ${categoryId}:`, keywords);

        this.weightedKeywords[categoryId] = {
            absolute: keywords.absolute || [],
            strong: keywords.strong || [],
            weak: keywords.weak || [],
            exclusions: keywords.exclusions || []
        };

        // Si c'est une cat√©gorie personnalis√©e, sauvegarder
        if (this.customCategories[categoryId]) {
            this.customCategories[categoryId].keywords = this.weightedKeywords[categoryId];
            this.saveCustomCategories();
        }

        console.log(`[CategoryManager] Mots-cl√©s mis √† jour pour ${categoryId}`);
        
        setTimeout(() => {
            this.dispatchEvent('keywordsUpdated', { categoryId, keywords: this.weightedKeywords[categoryId] });
        }, 10);
    }

    getCategoryKeywords(categoryId) {
        const keywords = this.weightedKeywords[categoryId];
        if (!keywords) {
            return {
                absolute: [],
                strong: [],
                weak: [],
                exclusions: []
            };
        }
        
        return {
            absolute: keywords.absolute || [],
            strong: keywords.strong || [],
            weak: keywords.weak || [],
            exclusions: keywords.exclusions || []
        };
    }

    addKeywordToCategory(categoryId, keyword, type = 'strong') {
        if (!this.categories[categoryId]) {
            throw new Error('Cat√©gorie non trouv√©e');
        }

        if (!this.weightedKeywords[categoryId]) {
            this.weightedKeywords[categoryId] = { absolute: [], strong: [], weak: [], exclusions: [] };
        }

        if (!this.weightedKeywords[categoryId][type]) {
            this.weightedKeywords[categoryId][type] = [];
        }

        const normalizedKeyword = keyword.toLowerCase().trim();
        if (!this.weightedKeywords[categoryId][type].includes(normalizedKeyword)) {
            this.weightedKeywords[categoryId][type].push(normalizedKeyword);
            this.updateCategoryKeywords(categoryId, this.weightedKeywords[categoryId]);
        }
    }

    removeKeywordFromCategory(categoryId, keyword, type) {
        if (!this.categories[categoryId] || !this.weightedKeywords[categoryId]) {
            return;
        }

        if (this.weightedKeywords[categoryId][type]) {
            const normalizedKeyword = keyword.toLowerCase().trim();
            this.weightedKeywords[categoryId][type] = this.weightedKeywords[categoryId][type].filter(k => k !== normalizedKeyword);
            this.updateCategoryKeywords(categoryId, this.weightedKeywords[categoryId]);
        }
    }

    getAllKeywords() {
        return { ...this.weightedKeywords };
    }

    // NOUVELLE m√©thode pour d√©tecter les emails personnels/familiaux
    isPersonalEmail(content, email) {
        const personalIndicators = [
            'papa', 'maman', 'mamie', 'papy', 'papi',
            'ch√©ri', 'ch√©rie', 'mon amour', 'ma ch√©rie',
            'bises', 'bisous', 'gros bisous', 'je t\'embrasse',
            'famille', 'familial', 'personnel', 'personal'
        ];
        
        const professionalCounterIndicators = [
            'ressources humaines', 'human resources', 'rh',
            'contrat', 'contract', 'entreprise', 'company',
            'professionnel', 'professional', 'business'
        ];
        
        const text = content.text.toLowerCase();
        
        // Compter les indicateurs personnels
        let personalScore = 0;
        personalIndicators.forEach(indicator => {
            if (text.includes(indicator)) {
                personalScore += 10;
            }
        });
        
        // R√©duire le score si des indicateurs professionnels sont pr√©sents
        let professionalScore = 0;
        professionalCounterIndicators.forEach(indicator => {
            if (text.includes(indicator)) {
                professionalScore += 10;
            }
        });
        
        // Email personnel si score personnel > 20 ET score professionnel < 10
        return personalScore > 20 && professionalScore < 10;
    }

    // Nouvelle m√©thode pour v√©rifier si on est destinataire principal
    isMainRecipient(email) {
        if (!email.toRecipients || !Array.isArray(email.toRecipients)) {
            return false;
        }
        
        const currentUserEmail = this.getCurrentUserEmail();
        if (!currentUserEmail) {
            return email.toRecipients.length > 0;
        }
        
        return email.toRecipients.some(recipient => {
            const recipientEmail = recipient.emailAddress?.address?.toLowerCase();
            return recipientEmail === currentUserEmail.toLowerCase();
        });
    }

    analyzeAllCategories(content) {
        const results = {};
        const activeCategories = this.getActiveCategories();
        
        // IMPORTANT: Toujours inclure TOUTES les cat√©gories personnalis√©es
        const customCategoryIds = Object.keys(this.customCategories);
        
        if (this.debugMode) {
            console.log('[CategoryManager] üéØ Analyse avec:');
            console.log('  - Cat√©gories actives:', activeCategories);
            console.log('  - Cat√©gories personnalis√©es:', customCategoryIds);
        }
        
        // Analyser toutes les cat√©gories (standard + personnalis√©es)
        const allCategoriesToAnalyze = new Set([
            ...Object.keys(this.weightedKeywords),
            ...customCategoryIds
        ]);
        
        for (const categoryId of allCategoriesToAnalyze) {
            // V√©rifier si la cat√©gorie est active OU personnalis√©e OU sp√©ciale
            const isActive = activeCategories.includes(categoryId);
            const isCustom = customCategoryIds.includes(categoryId);
            const isSpecial = ['marketing_news', 'cc'].includes(categoryId);
            
            if (!isActive && !isCustom && !isSpecial) {
                continue;
            }
            
            // V√©rifier que la cat√©gorie existe
            if (!this.categories[categoryId]) {
                console.warn(`[CategoryManager] ‚ö†Ô∏è Cat√©gorie ${categoryId} non trouv√©e`);
                continue;
            }
            
            // Obtenir les mots-cl√©s (depuis weightedKeywords ou cat√©gorie personnalis√©e)
            let keywords = this.weightedKeywords[categoryId];
            
            // Pour les cat√©gories personnalis√©es, charger depuis customCategories si n√©cessaire
            if (isCustom && (!keywords || this.isEmptyKeywords(keywords))) {
                const customCat = this.customCategories[categoryId];
                if (customCat && customCat.keywords) {
                    keywords = customCat.keywords;
                    // S'assurer que les mots-cl√©s sont dans weightedKeywords
                    this.weightedKeywords[categoryId] = keywords;
                }
            }
            
            // V√©rifier si la cat√©gorie a des mots-cl√©s
            if (!keywords || this.isEmptyKeywords(keywords)) {
                if (isCustom) {
                    console.warn(`[CategoryManager] ‚ö†Ô∏è Cat√©gorie personnalis√©e ${categoryId} (${this.categories[categoryId]?.name}) sans mots-cl√©s`);
                }
                continue;
            }
            
            // Calculer le score
            const score = this.calculateScore(content, keywords, categoryId);
            
            results[categoryId] = {
                category: categoryId,
                score: score.total,
                hasAbsolute: score.hasAbsolute,
                matches: score.matches,
                confidence: this.calculateConfidence(score),
                priority: this.categories[categoryId]?.priority || 50,
                isCustom: isCustom
            };
            
            if (this.debugMode && score.total > 0) {
                console.log(`[CategoryManager] üìä ${categoryId}: ${score.total}pts (${score.matches.length} matches)`);
            }
        }
        
        return results;
    }

    // M√©thode helper pour v√©rifier si les mots-cl√©s sont vides
    isEmptyKeywords(keywords) {
        return !keywords || (
            (!keywords.absolute || keywords.absolute.length === 0) &&
            (!keywords.strong || keywords.strong.length === 0) &&
            (!keywords.weak || keywords.weak.length === 0)
        );
    }

    getCategoryFilters(categoryId) {
        if (!this.categories[categoryId]) {
            return {
                includeDomains: [],
                excludeDomains: [],
                includeEmails: [],
                excludeEmails: []
            };
        }
        
        // Charger depuis le stockage ou utiliser les valeurs par d√©faut
        const filters = this.categoryFilters?.[categoryId] || this.categories[categoryId].filters || {
            includeDomains: [],
            excludeDomains: [],
            includeEmails: [],
            excludeEmails: []
        };
        
        return {
            includeDomains: filters.includeDomains || [],
            excludeDomains: filters.excludeDomains || [],
            includeEmails: filters.includeEmails || [],
            excludeEmails: filters.excludeEmails || []
        };
    }

    updateCategoryFilters(categoryId, filters) {
        if (!this.categories[categoryId]) {
            throw new Error('Cat√©gorie non trouv√©e');
        }
        
        console.log(`[CategoryManager] Mise √† jour filtres pour ${categoryId}:`, filters);
        
        // Initialiser si n√©cessaire
        if (!this.categoryFilters) {
            this.categoryFilters = {};
        }
        
        this.categoryFilters[categoryId] = {
            includeDomains: filters.includeDomains || [],
            excludeDomains: filters.excludeDomains || [],
            includeEmails: filters.includeEmails || [],
            excludeEmails: filters.excludeEmails || []
        };
        
        // Si c'est une cat√©gorie personnalis√©e, sauvegarder
        if (this.customCategories[categoryId]) {
            this.customCategories[categoryId].filters = this.categoryFilters[categoryId];
            this.saveCustomCategories();
        } else {
            // Pour les cat√©gories standard, sauvegarder dans localStorage s√©par√©ment
            this.saveCategoryFilters();
        }
        
        console.log(`[CategoryManager] Filtres mis √† jour pour ${categoryId}`);
        
        // Notifier les changements
        setTimeout(() => {
            this.dispatchEvent('categoryFiltersUpdated', { 
                categoryId, 
                filters: this.categoryFilters[categoryId] 
            });
        }, 10);
    }

    saveCategoryFilters() {
        try {
            localStorage.setItem('categoryFilters', JSON.stringify(this.categoryFilters || {}));
            console.log('[CategoryManager] Filtres de cat√©gories sauvegard√©s');
        } catch (error) {
            console.error('[CategoryManager] Erreur sauvegarde filtres:', error);
        }
    }

    loadCategoryFilters() {
        try {
            const saved = localStorage.getItem('categoryFilters');
            this.categoryFilters = saved ? JSON.parse(saved) : {};
            console.log('[CategoryManager] Filtres de cat√©gories charg√©s');
        } catch (error) {
            console.error('[CategoryManager] Erreur chargement filtres:', error);
            this.categoryFilters = {};
        }
    }

    // Modifier la m√©thode analyzeEmail pour prendre en compte les filtres
    analyzeEmailWithFilters(email) {
        const baseAnalysis = this.analyzeEmail(email);
        
        // Si l'email est d√©j√† bien cat√©goris√© avec un score √©lev√©, on peut le garder
        if (baseAnalysis.category !== 'other' && baseAnalysis.score >= 100 && baseAnalysis.hasAbsolute) {
            return baseAnalysis;
        }
        
        // V√©rifier les filtres d'inclusion/exclusion pour chaque cat√©gorie
        const emailDomain = this.extractDomain(email.from?.emailAddress?.address);
        const emailAddress = email.from?.emailAddress?.address?.toLowerCase();
        
        let bestMatch = null;
        let highestPriority = -1;
        
        Object.entries(this.categories).forEach(([categoryId, category]) => {
            const filters = this.getCategoryFilters(categoryId);
            
            // V√©rifier les exclusions d'abord
            if (filters.excludeDomains?.includes(emailDomain) || 
                filters.excludeEmails?.includes(emailAddress)) {
                // Cette cat√©gorie est exclue pour cet email
                return;
            }
            
            // V√©rifier les inclusions
            if (filters.includeDomains?.includes(emailDomain) || 
                filters.includeEmails?.includes(emailAddress)) {
                // Cette cat√©gorie a une inclusion directe
                const priority = category.priority || 50;
                if (priority > highestPriority) {
                    highestPriority = priority;
                    bestMatch = {
                        category: categoryId,
                        score: 150, // Score √©lev√© pour les inclusions directes
                        confidence: 0.95,
                        matchedPatterns: [{
                            keyword: filters.includeDomains?.includes(emailDomain) ? 
                                `domain:${emailDomain}` : `email:${emailAddress}`,
                            type: 'filter',
                            score: 150
                        }],
                        hasAbsolute: true,
                        matchedByFilter: true
                    };
                }
            }
        });
        
        // Si on a trouv√© une correspondance par filtre, l'utiliser
        if (bestMatch) {
            return bestMatch;
        }
        
        // Sinon, retourner l'analyse de base
        return baseAnalysis;
    }

    // Ajouter cette m√©thode dans l'initialisation
    initializeFilters() {
        this.loadCategoryFilters();
        console.log('[CategoryManager] Filtres initialis√©s');
    }

    applyEnhancedDomainBonus(content, categoryId, matches, totalScore) {
        const domainBonuses = {
            security: ['microsoft', 'google', 'apple', 'security', 'auth', '2fa', 'verification'],
            finance: ['gouv.fr', 'impots', 'bank', 'paypal', 'stripe', 'invoice', 'billing'],
            marketing_news: ['newsletter', 'mailchimp', 'campaign', 'marketing', 'sendinblue', 'mailjet'],
            notifications: ['noreply', 'notification', 'donotreply', 'automated', 'system'],
            project: ['github', 'gitlab', 'jira', 'asana', 'trello', 'confluence', 'bitbucket'],
            hr: ['workday', 'bamboohr', 'adp', 'payroll', 'hr', 'recruiting'],
            meetings: ['zoom', 'teams', 'meet', 'webex', 'gotomeeting', 'calendar'],
            support: ['zendesk', 'freshdesk', 'helpdesk', 'support', 'ticket']
        };
        
        if (domainBonuses[categoryId]) {
            for (const domainKeyword of domainBonuses[categoryId]) {
                if (content.domain.includes(domainKeyword)) {
                    const bonus = 40; // Bonus uniforme plus √©lev√©
                    totalScore += bonus;
                    matches.push({ keyword: `${domainKeyword}_domain`, type: 'domain', score: bonus });
                    break;
                }
            }
        }
    }

    isGloballyExcluded(content, email) {
        const exclusions = this.settings.categoryExclusions;
        if (!exclusions) return false;
        
        // V√©rifier les domaines exclus
        if (exclusions.domains && exclusions.domains.length > 0) {
            for (const domain of exclusions.domains) {
                if (content.domain.includes(domain.toLowerCase())) {
                    return true;
                }
            }
        }
        
        // V√©rifier les emails exclus
        if (exclusions.emails && exclusions.emails.length > 0) {
            const emailAddress = email.from?.emailAddress?.address?.toLowerCase();
            if (emailAddress && exclusions.emails.includes(emailAddress)) {
                return true;
            }
        }
        
        return false;
    }

    analyzeCategory(content, keywords) {
        return this.calculateScore(content, keywords, 'single');
    }

    extractCompleteContent(email) {
        let allText = '';
        let subject = '';
        
        // IMPORTANT: Traiter le sujet avec un poids tr√®s √©lev√©
        if (email.subject && email.subject.trim()) {
            subject = email.subject;
            // R√©p√©ter le sujet 10 fois pour lui donner beaucoup plus de poids
            allText += (email.subject + ' ').repeat(10);
        } else {
            // Si pas de sujet, ajouter un marqueur pour la d√©tection
            subject = '[SANS_SUJET]';
            allText += 'sans sujet email sans objet ';
        }
        
        // Extraire l'exp√©diteur
        if (email.from?.emailAddress?.address) {
            allText += (email.from.emailAddress.address + ' ').repeat(3);
        }
        if (email.from?.emailAddress?.name) {
            allText += (email.from.emailAddress.name + ' ').repeat(3);
        }
        
        // Extraire les destinataires (important pour d√©tecter si on est en copie)
        if (email.toRecipients && Array.isArray(email.toRecipients)) {
            email.toRecipients.forEach(recipient => {
                if (recipient.emailAddress?.address) {
                    allText += recipient.emailAddress.address + ' ';
                }
                if (recipient.emailAddress?.name) {
                    allText += recipient.emailAddress.name + ' ';
                }
            });
        }
        
        // Extraire les CC
        if (email.ccRecipients && Array.isArray(email.ccRecipients)) {
            email.ccRecipients.forEach(recipient => {
                if (recipient.emailAddress?.address) {
                    allText += recipient.emailAddress.address + ' ';
                }
                if (recipient.emailAddress?.name) {
                    allText += recipient.emailAddress.name + ' ';
                }
            });
        }
        
        // Extraire le contenu du corps
        if (email.bodyPreview) {
            allText += email.bodyPreview + ' ';
        }
        
        if (email.body?.content) {
            const cleanedBody = this.cleanHtml(email.body.content);
            allText += cleanedBody + ' ';
            
            // Extraire les mots importants du corps (en majuscules)
            const importantWords = cleanedBody.match(/\b[A-Z]{2,}\b/g);
            if (importantWords) {
                allText += importantWords.join(' ') + ' ';
            }
        }
        
        // Analyser le contexte de l'email pour d√©tecter des patterns
        const contextClues = this.extractContextClues(email);
        allText += contextClues + ' ';
        
        return {
            text: allText.toLowerCase().trim(),
            subject: subject.toLowerCase(),
            domain: this.extractDomain(email.from?.emailAddress?.address),
            hasHtml: !!(email.body?.content && email.body.content.includes('<')),
            length: allText.length,
            hasNoSubject: !email.subject || !email.subject.trim(),
            rawSubject: email.subject || ''
        };
    }

    // Nouvelle m√©thode pour extraire des indices contextuels
    extractContextClues(email) {
        let clues = '';
        
        // D√©tecter les patterns de r√©ponse/transfert
        const subject = email.subject || '';
        if (subject.match(/^(RE:|FW:|Fwd:|Tr:)/i)) {
            clues += ' conversation reply response ';
        }
        
        // D√©tecter les mentions de documents
        const body = email.body?.content || email.bodyPreview || '';
        if (body.match(/ci-joint|attached|attachment|pi√®ce jointe|document/i)) {
            clues += ' document attachment piece jointe ';
        }
        
        // D√©tecter les formules de politesse familiales
        if (body.match(/\b(papa|maman|bises|bisous)\b/i)) {
            clues += ' famille family personal personnel ';
        }
        
        // D√©tecter les mentions commerciales
        if (body.match(/\b(commande|order|facture|invoice|livraison|delivery|n¬∞|num√©ro)\b/i)) {
            clues += ' commerce order commande achat vente ';
        }
        
        return clues;
    }

    cleanHtml(html) {
        if (!html) return '';
        return html
            .replace(/<a[^>]*>(.*?)<\/a>/gi, ' $1 ')
            .replace(/<[^>]+>/g, ' ')
            .replace(/&[^;]+;/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    extractDomain(email) {
        if (!email || !email.includes('@')) return 'unknown';
        return email.split('@')[1]?.toLowerCase() || 'unknown';
    }

    // M√©thode helper pour √©chapper les caract√®res sp√©ciaux regex
    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\    updateCategoryKeywords(categoryId, keywords) {
        if (!this.categories[categoryId]) {
            throw new Error('Cat√©gorie non trouv√©e');
        }');
    }

    calculateConfidence(score) {
        if (score.hasAbsolute) return 0.95;
        if (score.total >= 200) return 0.90;
        if (score.total >= 150) return 0.85;
        if (score.total >= 100) return 0.80;
        if (score.total >= 80) return 0.75;
        if (score.total >= 60) return 0.70;
        if (score.total >= 40) return 0.60;
        if (score.total >= 30) return 0.55;
        return 0.40;
    }

    isSpamEmail(email) {
        if (email.parentFolderId) {
            const folderInfo = email.parentFolderId.toLowerCase();
            if (folderInfo.includes('junk') || 
                folderInfo.includes('spam') || 
                folderInfo.includes('unwanted') ||
                folderInfo.includes('ind√©sirable')) {
                return true;
            }
        }
        
        if (email.categories && Array.isArray(email.categories)) {
            const hasSpamCategory = email.categories.some(cat => 
                cat.toLowerCase().includes('spam') ||
                cat.toLowerCase().includes('junk') ||
                cat.toLowerCase().includes('ind√©sirable')
            );
            if (hasSpamCategory) return true;
        }
        
        return false;
    }

    isInCC(email) {
        // Si pas de CC, ce n'est pas un email en CC
        if (!email.ccRecipients || !Array.isArray(email.ccRecipients) || email.ccRecipients.length === 0) {
            return false;
        }
        
        const currentUserEmail = this.getCurrentUserEmail();
        
        if (!currentUserEmail) {
            console.log('[CategoryManager] ‚ö†Ô∏è Email utilisateur non trouv√©');
            return false;
        }
        
        // V√©rifier si l'utilisateur est dans TO
        const isInToList = email.toRecipients?.some(recipient => {
            const recipientEmail = recipient.emailAddress?.address?.toLowerCase();
            return recipientEmail === currentUserEmail.toLowerCase();
        }) || false;
        
        // V√©rifier si l'utilisateur est dans CC
        const isInCCList = email.ccRecipients.some(recipient => {
            const recipientEmail = recipient.emailAddress?.address?.toLowerCase();
            return recipientEmail === currentUserEmail.toLowerCase();
        });
        
        // IMPORTANT: On est en CC seulement si on est dans CC ET PAS dans TO
        const result = isInCCList && !isInToList;
        
        if (result) {
            console.log('[CategoryManager] üìã Email en CC d√©tect√© (pas destinataire principal):', {
                subject: email.subject?.substring(0, 50),
                inTo: isInToList,
                inCC: isInCCList
            });
        }
        
        return result;
    }

    getCurrentUserEmail() {
        try {
            // Essayer plusieurs sources
            const userInfo = localStorage.getItem('currentUserInfo');
            if (userInfo) {
                const parsed = JSON.parse(userInfo);
                return parsed.email || parsed.userPrincipalName || parsed.mail;
            }
            
            // Essayer depuis le token MSAL
            const msalAccounts = JSON.parse(localStorage.getItem('msal.account.keys') || '[]');
            if (msalAccounts.length > 0) {
                const firstAccount = localStorage.getItem(msalAccounts[0]);
                if (firstAccount) {
                    const account = JSON.parse(firstAccount);
                    return account.username || account.preferred_username;
                }
            }
            
            // Essayer depuis AuthService
            if (window.authService && typeof window.authService.getCurrentUser === 'function') {
                const user = window.authService.getCurrentUser();
                if (user) {
                    return user.email || user.userPrincipalName || user.username;
                }
            }
            
        } catch (e) {
            console.warn('[CategoryManager] Impossible de r√©cup√©rer l\'email utilisateur:', e);
        }
        return null;
    }

    getCategories() {
        return this.categories;
    }
    
    getCategory(categoryId) {
        if (categoryId === 'all') {
            return { id: 'all', name: 'Tous', icon: 'üìß', color: '#1e293b' };
        }
        if (categoryId === 'other') {
            return { id: 'other', name: 'Non class√©', icon: '‚ùì', color: '#64748b' };
        }
        if (categoryId === 'spam') {
            return { id: 'spam', name: 'Spam', icon: 'üö´', color: '#dc2626' };
        }
        if (categoryId === 'excluded') {
            return { id: 'excluded', name: 'Exclu', icon: 'üö´', color: '#6b7280' };
        }
        return this.categories[categoryId] || null;
    }
    
    getCategoryStats() {
        const stats = {
            totalCategories: Object.keys(this.categories).length,
            customCategories: Object.keys(this.customCategories).length,
            activeCategories: this.getActiveCategories().length,
            preselectedCategories: this.settings.taskPreselectedCategories?.length || 0,
            totalKeywords: 0,
            absoluteKeywords: 0,
            strongKeywords: 0,
            weakKeywords: 0,
            exclusionKeywords: 0
        };
        
        for (const keywords of Object.values(this.weightedKeywords)) {
            if (keywords.absolute) stats.absoluteKeywords += keywords.absolute.length;
            if (keywords.strong) stats.strongKeywords += keywords.strong.length;
            if (keywords.weak) stats.weakKeywords += keywords.weak.length;
            if (keywords.exclusions) stats.exclusionKeywords += keywords.exclusions.length;
        }
        
        stats.totalKeywords = stats.absoluteKeywords + stats.strongKeywords + stats.weakKeywords + stats.exclusionKeywords;
        return stats;
    }
    
    setDebugMode(enabled) {
        this.debugMode = enabled;
        console.log(`[CategoryManager] Mode debug ${enabled ? 'activ√©' : 'd√©sactiv√©'}`);
    }
    
    testEmail(subject, body = '', from = 'test@example.com', expectedCategory = null) {
        const testEmail = {
            subject: subject,
            body: { content: body },
            bodyPreview: body.substring(0, 100),
            from: { emailAddress: { address: from } },
            toRecipients: [{ emailAddress: { address: 'user@example.com' } }],
            receivedDateTime: new Date().toISOString()
        };
        
        const result = this.analyzeEmail(testEmail);
        
        console.log('\n[CategoryManager] TEST RESULT:');
        console.log(`Subject: "${subject}"`);
        console.log(`From: ${from}`);
        console.log(`Category: ${result.category} (expected: ${expectedCategory || 'any'})`);
        console.log(`Score: ${result.score}pts`);
        console.log(`Confidence: ${Math.round(result.confidence * 100)}%`);
        console.log(`Matches:`, result.matchedPatterns);
        
        if (expectedCategory && result.category !== expectedCategory) {
            console.log(`‚ùå FAILED - Expected ${expectedCategory}, got ${result.category}`);
        } else {
            console.log('‚úÖ SUCCESS');
        }
        
        return result;
    }

    testKeywords(categoryId, testText) {
        const keywords = this.getCategoryKeywords(categoryId);
        if (!keywords) {
            console.error(`[CategoryManager] Cat√©gorie ${categoryId} non trouv√©e`);
            return null;
        }

        const content = {
            text: testText.toLowerCase(),
            subject: testText.toLowerCase(),
            domain: 'test.com'
        };

        const result = this.calculateScore(content, keywords, categoryId);
        
        console.log(`\n[CategoryManager] TEST KEYWORDS - ${categoryId}:`);
        console.log(`Text: "${testText}"`);
        console.log(`Score: ${result.total}pts`);
        console.log(`Has Absolute: ${result.hasAbsolute}`);
        console.log(`Matches:`, result.matches);
        console.log(`Confidence: ${Math.round(this.calculateConfidence(result) * 100)}%`);
        
        return result;
    }

    exportKeywords() {
        const data = {
            exportDate: new Date().toISOString(),
            categories: {},
            customCategories: this.customCategories
        };

        Object.entries(this.categories).forEach(([id, category]) => {
            data.categories[id] = {
                name: category.name,
                description: category.description,
                keywords: this.getCategoryKeywords(id)
            };
        });

        return JSON.stringify(data, null, 2);
    }

    importKeywords(jsonData) {
        try {
            const data = JSON.parse(jsonData);
            
            if (data.categories) {
                Object.entries(data.categories).forEach(([categoryId, categoryData]) => {
                    if (this.categories[categoryId] && categoryData.keywords) {
                        this.updateCategoryKeywords(categoryId, categoryData.keywords);
                    }
                });
            }

            if (data.customCategories) {
                Object.entries(data.customCategories).forEach(([categoryId, categoryData]) => {
                    if (!this.customCategories[categoryId]) {
                        this.createCustomCategory(categoryData);
                    }
                });
            }

            console.log('[CategoryManager] Mots-cl√©s import√©s avec succ√®s');
            return true;
            
        } catch (error) {
            console.error('[CategoryManager] Erreur import mots-cl√©s:', error);
            return false;
        }
    }

    setupEventListeners() {
        if (this.eventListenersSetup) {
            return;
        }

        // √âcouter seulement les √©v√©nements externes (pas les n√¥tres)
        this.externalSettingsChangeHandler = (event) => {
            // Ignorer nos propres √©v√©nements
            if (event.detail?.source === 'CategoryManager') {
                return;
            }
            
            const { type, value } = event.detail;
            console.log(`[CategoryManager] Re√ßu changement externe: ${type}`, value);
            
            // Appliquer sans notifier (pour √©viter les boucles)
            this.syncQueue.push({
                type,
                value,
                notifyModules: false,
                timestamp: Date.now()
            });
            
            if (!this.syncInProgress) {
                this.processSettingsChanges();
            }
        };

        window.addEventListener('settingsChanged', this.externalSettingsChangeHandler);
        this.eventListenersSetup = true;
        
        console.log('[CategoryManager] Event listeners configur√©s (anti-boucle)');
    }

    validateKeywords(keywords) {
        const errors = [];
        const types = ['absolute', 'strong', 'weak', 'exclusions'];
        
        types.forEach(type => {
            if (keywords[type] && !Array.isArray(keywords[type])) {
                errors.push(`${type} doit √™tre un tableau`);
            }
            
            if (keywords[type]) {
                keywords[type].forEach((keyword, index) => {
                    if (typeof keyword !== 'string') {
                        errors.push(`${type}[${index}] doit √™tre une cha√Æne`);
                    }
                    if (keyword.length < 2) {
                        errors.push(`${type}[${index}] trop court (min 2 caract√®res)`);
                    }
                    if (keyword.length > 100) {
                        errors.push(`${type}[${index}] trop long (max 100 caract√®res)`);
                    }
                });
            }
        });
        
        return errors;
    }

    sanitizeKeywords(keywords) {
        const sanitized = {
            absolute: [],
            strong: [],
            weak: [],
            exclusions: []
        };
        
        Object.keys(sanitized).forEach(type => {
            if (keywords[type] && Array.isArray(keywords[type])) {
                sanitized[type] = keywords[type]
                    .filter(k => typeof k === 'string' && k.trim().length >= 2)
                    .map(k => k.trim().toLowerCase())
                    .filter((k, index, arr) => arr.indexOf(k) === index); // D√©doublonner
            }
        });
        
        return sanitized;
    }

    cleanupOrphanedKeywords() {
        const validCategoryIds = Object.keys(this.categories);
        const orphanedIds = Object.keys(this.weightedKeywords)
            .filter(id => !validCategoryIds.includes(id));
        
        orphanedIds.forEach(id => {
            console.log(`[CategoryManager] Suppression mots-cl√©s orphelins pour: ${id}`);
            delete this.weightedKeywords[id];
        });
        
        return orphanedIds.length;
    }

    rebuildKeywordsIndex() {
        console.log('[CategoryManager] Reconstruction de l\'index des mots-cl√©s...');
        
        // R√©initialiser avec les mots-cl√©s par d√©faut
        this.initializeWeightedDetection();
        
        // Recharger les cat√©gories personnalis√©es
        Object.entries(this.customCategories).forEach(([id, category]) => {
            if (category.keywords) {
                this.weightedKeywords[id] = this.sanitizeKeywords(category.keywords);
            }
        });
        
        console.log('[CategoryManager] Index des mots-cl√©s reconstruit');
    }

    runDiagnostics() {
        console.group('üè• DIAGNOSTIC COMPLET CategoryManager v21.0');
        
        // 1. V√©rifier les cat√©gories
        console.group('üìÇ Cat√©gories');
        const allCategories = Object.keys(this.categories);
        const customCategories = Object.keys(this.customCategories);
        const activeCategories = this.getActiveCategories();
        
        console.log('Total cat√©gories:', allCategories.length);
        console.log('Cat√©gories standard:', allCategories.filter(c => !this.categories[c].isCustom).length);
        console.log('Cat√©gories personnalis√©es:', customCategories.length);
        console.log('Cat√©gories actives:', activeCategories.length);
        
        // V√©rifier les cat√©gories personnalis√©es
        customCategories.forEach(catId => {
            const cat = this.categories[catId];
            const keywords = this.weightedKeywords[catId];
            const isActive = activeCategories.includes(catId);
            const keywordCount = this.getTotalKeywordsCount(catId);
            
            console.log(`\n${cat.icon} ${cat.name} (${catId}):`);
            console.log('  - Active:', isActive ? '‚úÖ' : '‚ùå');
            console.log('  - Priorit√©:', cat.priority);
            console.log('  - Mots-cl√©s:', keywordCount);
            
            if (keywordCount === 0) {
                console.warn('  ‚ö†Ô∏è AUCUN MOT-CL√â D√âFINI!');
            }
        });
        console.groupEnd();
        
        // 2. V√©rifier l'efficacit√© des cat√©gories
        console.group('üìä Efficacit√© des cat√©gories');
        Object.entries(this.weightedKeywords).forEach(([catId, keywords]) => {
            const totalKeywords = this.getTotalKeywordsCount(catId);
            const absoluteCount = keywords.absolute?.length || 0;
            const efficiency = totalKeywords > 0 ? Math.round((absoluteCount / totalKeywords) * 100) : 0;
            
            if (efficiency < 30 && totalKeywords > 0) {
                const cat = this.categories[catId];
                console.warn(`‚ö†Ô∏è ${cat.icon} ${cat.name}: ${efficiency}% d'efficacit√© (${absoluteCount} absolus sur ${totalKeywords} total)`);
            }
        });
        console.groupEnd();
        
        // 3. V√©rifier la synchronisation
        console.group('üîÑ √âtat de synchronisation');
        console.log('Queue de sync:', this.syncQueue.length);
        console.log('Sync en cours:', this.syncInProgress);
        console.log('Derni√®re sync:', new Date(this.lastSyncTimestamp).toLocaleTimeString());
        console.log('Listeners actifs:', this.changeListeners.size);
        console.groupEnd();
        
        // 4. Recommandations
        console.group('üí° Recommandations');
        
        // Cat√©gories sans mots-cl√©s
        const emptyCats = allCategories.filter(catId => this.getTotalKeywordsCount(catId) === 0);
        if (emptyCats.length > 0) {
            console.warn('Cat√©gories sans mots-cl√©s:', emptyCats);
        }
        
        // Cat√©gories peu efficaces
        const inefficientCats = Object.entries(this.weightedKeywords)
            .filter(([catId, keywords]) => {
                const total = this.getTotalKeywordsCount(catId);
                const absolute = keywords.absolute?.length || 0;
                return total > 0 && (absolute / total) < 0.3;
            })
            .map(([catId]) => this.categories[catId]?.name || catId);
        
        if (inefficientCats.length > 0) {
            console.warn('Cat√©gories peu efficaces (< 30% mots absolus):', inefficientCats);
            console.log('‚Üí Ajoutez plus de mots-cl√©s absolus pour am√©liorer la d√©tection');
        }
        
        console.groupEnd();
        console.groupEnd();
        
        return {
            totalCategories: allCategories.length,
            customCategories: customCategories.length,
            activeCategories: activeCategories.length,
            emptyCategoriesCount: emptyCats.length,
            inefficientCategoriesCount: inefficientCats.length
        };
    }

    getDebugInfo() {
        return {
            isInitialized: this.isInitialized,
            syncInProgress: this.syncInProgress,
            syncQueueLength: this.syncQueue.length,
            lastSyncTimestamp: this.lastSyncTimestamp,
            changeListenersCount: this.changeListeners.size,
            eventListenersSetup: this.eventListenersSetup,
            settings: this.settings,
            taskPreselectedCategories: this.getTaskPreselectedCategories(),
            activeCategories: this.getActiveCategories(),
            totalCategories: Object.keys(this.categories).length,
            customCategoriesCount: Object.keys(this.customCategories).length
        };
    }

    // Force la synchronisation imm√©diate de tous les modules
    forceSyncAllModules() {
        console.log('[CategoryManager] üöÄ === SYNCHRONISATION FORC√âE TOUS MODULES ===');
        
        const criticalSettings = [
            'taskPreselectedCategories',
            'activeCategories',
            'categoryExclusions',
            'scanSettings',
            'automationSettings',
            'preferences'
        ];
        
        criticalSettings.forEach(settingType => {
            const value = this.settings[settingType];
            if (value !== undefined) {
                console.log(`[CategoryManager] üîÑ Force sync: ${settingType}`, value);
                this.notifySpecificModules(settingType, value);
            }
        });
        
        // Notification g√©n√©rale finale
        this.notifyAllModules('fullSync', this.settings);
        
        console.log('[CategoryManager] ‚úÖ Synchronisation forc√©e termin√©e');
    }

    // Test complet de synchronisation
    testSynchronization() {
        console.group('üß™ TEST SYNCHRONISATION CategoryManager');
        
        const debugInfo = this.getDebugInfo();
        console.log('Debug Info:', debugInfo);
        
        // Test modification taskPreselectedCategories
        const originalCategories = [...this.getTaskPreselectedCategories()];
        const testCategories = ['tasks', 'commercial'];
        
        console.log('Test: Modification taskPreselectedCategories');
        console.log('Avant:', originalCategories);
        
        this.updateTaskPreselectedCategories(testCategories);
        
        setTimeout(() => {
            const newCategories = this.getTaskPreselectedCategories();
            console.log('Apr√®s:', newCategories);
            
            // V√©rifier EmailScanner
            const emailScannerCategories = window.emailScanner?.getTaskPreselectedCategories() || [];
            console.log('EmailScanner a:', emailScannerCategories);
            
            const isSync = JSON.stringify(newCategories.sort()) === JSON.stringify(emailScannerCategories.sort());
            console.log('Synchronisation:', isSync ? '‚úÖ OK' : '‚ùå √âCHEC');
            
            // Remettre les valeurs originales
            this.updateTaskPreselectedCategories(originalCategories);
            
            console.groupEnd();
        }, 500);
        
        return true;
    }

    cleanup() {
        // Arr√™ter tous les intervals
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
        
        // Nettoyer les event listeners
        if (this.externalSettingsChangeHandler) {
            window.removeEventListener('settingsChanged', this.externalSettingsChangeHandler);
        }
        
        // Vider les queues et listeners
        this.syncQueue = [];
        this.changeListeners.clear();
        this.eventListenersSetup = false;
        this.syncInProgress = false;
        
        console.log('[CategoryManager] üßπ Nettoyage effectu√©');
    }

    destroy() {
        this.cleanup();
        this.categories = {};
        this.weightedKeywords = {};
        this.customCategories = {};
        this.settings = {};
        console.log('[CategoryManager] Instance d√©truite');
    }

    dispatchEvent(eventName, detail) {
        try {
            window.dispatchEvent(new CustomEvent(eventName, { 
                detail: {
                    ...detail,
                    source: 'CategoryManager',
                    timestamp: Date.now()
                }
            }));
        } catch (error) {
            console.error(`[CategoryManager] Erreur dispatch ${eventName}:`, error);
        }
    }
}

// ================================================
// INITIALISATION GLOBALE S√âCURIS√âE
// ================================================

// Cr√©er l'instance globale avec nettoyage pr√©alable
if (window.categoryManager) {
    console.log('[CategoryManager] üîÑ Nettoyage ancienne instance...');
    window.categoryManager.destroy?.();
}

console.log('[CategoryManager] üöÄ Cr√©ation nouvelle instance v21.0...');
window.categoryManager = new CategoryManager();

// Export des m√©thodes de test globales am√©lior√©es
window.testCategoryManager = function() {
    console.group('üß™ TEST CategoryManager v21.0');
    
    const tests = [
        { subject: "Newsletter hebdomadaire - D√©sabonnez-vous ici", expected: "marketing_news" },
        { subject: "Action requise: Confirmer votre commande", expected: "tasks" },
        { subject: "Nouvelle connexion d√©tect√©e sur votre compte", expected: "security" },
        { subject: "Facture #12345 - √âch√©ance dans 3 jours", expected: "finance" },
        { subject: "R√©union √©quipe pr√©vue pour demain", expected: "meetings" },
        { subject: "Rappel utile : reste vigilant face aux arnaques", body: "Si tu ne souhaites plus recevoir les informations de notre part, clique-ici", from: "no-reply@news.fitnesspark.fr", expected: "marketing_news" }
    ];
    
    tests.forEach(test => {
        window.categoryManager.testEmail(test.subject, test.body || '', test.from || 'test@example.com', test.expected);
    });
    
    console.log('Stats:', window.categoryManager.getCategoryStats());
    console.log('Debug Info:', window.categoryManager.getDebugInfo());
    
    // Test synchronisation
    window.categoryManager.testSynchronization();
    
    console.groupEnd();
    return { success: true, testsRun: tests.length };
};

window.debugCategoryKeywords = function() {
    console.group('üîç DEBUG Mots-cl√©s v21.0');
    const allKeywords = window.categoryManager.getAllKeywords();
    
    Object.entries(allKeywords).forEach(([categoryId, keywords]) => {
        const category = window.categoryManager.getCategory(categoryId);
        const total = (keywords.absolute?.length || 0) + (keywords.strong?.length || 0) + 
                     (keywords.weak?.length || 0) + (keywords.exclusions?.length || 0);
        
        if (total > 0) {
            console.log(`${category?.icon || 'üìÇ'} ${category?.name || categoryId}: ${total} mots-cl√©s`);
            if (keywords.absolute?.length) console.log(`  Absolus: ${keywords.absolute.slice(0, 5).join(', ')}${keywords.absolute.length > 5 ? '...' : ''}`);
            if (keywords.strong?.length) console.log(`  Forts: ${keywords.strong.slice(0, 5).join(', ')}${keywords.strong.length > 5 ? '...' : ''}`);
            if (keywords.weak?.length) console.log(`  Faibles: ${keywords.weak.slice(0, 5).join(', ')}${keywords.weak.length > 5 ? '...' : ''}`);
            if (keywords.exclusions?.length) console.log(`  Exclusions: ${keywords.exclusions.slice(0, 5).join(', ')}${keywords.exclusions.length > 5 ? '...' : ''}`);
        }
    });
    
    console.groupEnd();
};

window.testCategorySync = function() {
    return window.categoryManager.testSynchronization();
};

window.forceCategorySync = function() {
    window.categoryManager.forceSyncAllModules();
    return { success: true, message: 'Synchronisation forc√©e effectu√©e' };
};

window.runCategoryDiagnostics = function() {
    return window.categoryManager.runDiagnostics();
};

console.log('‚úÖ CategoryManager v21.0 loaded - D√©tection marketing am√©lior√©e!');
