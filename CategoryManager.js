// CategoryManager.js - Version 22.0 - Banque de donn√©es simplifi√©e
// Ce module ne fait que stocker et g√©rer les cat√©gories et mots-cl√©s
// Pas de priorit√©s, pas d'exclusions - EmailScanner g√®re toute la logique

class CategoryManager {
    constructor() {
        this.categories = {};
        this.weightedKeywords = {};
        this.customCategories = {};
        this.settings = this.loadSettings();
        this.categoryFilters = {};
        this.changeListeners = new Set();
        
        // Initialisation des donn√©es
        this.initializeCategories();
        this.initializeWeightedKeywords();
        this.loadCustomCategories();
        this.loadCategoryFilters();
        
        console.log('[CategoryManager] ‚úÖ Version 22.0 - Banque de donn√©es simplifi√©e');
        console.log('[CategoryManager] üìö Cat√©gories disponibles:', Object.keys(this.categories).length);
    }

    // ================================================
    // D√âFINITION DES CAT√âGORIES
    // ================================================
    initializeCategories() {
        this.categories = {
            marketing_news: {
                name: 'Marketing & News',
                icon: 'üì∞',
                color: '#8b5cf6',
                description: 'Newsletters et promotions',
                isCustom: false
            },
            
            cc: {
                name: 'En Copie',
                icon: 'üìã',
                color: '#64748b',
                description: 'Emails o√π vous √™tes en copie',
                isCustom: false
            },
            
            security: {
                name: 'S√©curit√©',
                icon: 'üîí',
                color: '#991b1b',
                description: 'Alertes de s√©curit√©, connexions et authentification',
                isCustom: false
            },
            
            finance: {
                name: 'Finance',
                icon: 'üí∞',
                color: '#dc2626',
                description: 'Factures et paiements',
                isCustom: false
            },
            
            tasks: {
                name: 'Actions Requises',
                icon: '‚úÖ',
                color: '#ef4444',
                description: 'T√¢ches √† faire et demandes d\'action',
                isCustom: false
            },
            
            commercial: {
                name: 'Commercial',
                icon: 'üíº',
                color: '#059669',
                description: 'Opportunit√©s, devis et contrats',
                isCustom: false
            },
            
            meetings: {
                name: 'R√©unions',
                icon: 'üìÖ',
                color: '#f59e0b',
                description: 'Invitations et demandes de r√©union',
                isCustom: false
            },
            
            support: {
                name: 'Support',
                icon: 'üõ†Ô∏è',
                color: '#f59e0b',
                description: 'Tickets et assistance',
                isCustom: false
            },
            
            reminders: {
                name: 'Relances',
                icon: 'üîÑ',
                color: '#10b981',
                description: 'Rappels et suivis',
                isCustom: false
            },
            
            project: {
                name: 'Projets',
                icon: 'üìä',
                color: '#3b82f6',
                description: 'Gestion de projet',
                isCustom: false
            },
            
            hr: {
                name: 'RH',
                icon: 'üë•',
                color: '#10b981',
                description: 'Ressources humaines',
                isCustom: false
            },
            
            internal: {
                name: 'Communication Interne',
                icon: 'üì¢',
                color: '#0ea5e9',
                description: 'Annonces internes',
                isCustom: false
            },
            
            notifications: {
                name: 'Notifications',
                icon: 'üîî',
                color: '#94a3b8',
                description: 'Notifications automatiques',
                isCustom: false
            }
        };
    }

    // ================================================
    // D√âFINITION DES MOTS-CL√âS
    // ================================================
    initializeWeightedKeywords() {
        this.weightedKeywords = {
            marketing_news: {
                absolute: [
                    'se d√©sinscrire', 'se desinscrire', 'd√©sinscrire', 'desinscrire',
                    'unsubscribe', 'opt out', 'opt-out', 'd√©sabonner', 'desabonner',
                    'g√©rer vos pr√©f√©rences', 'g√©rer la r√©ception', 'g√©rer mes pr√©f√©rences',
                    'email preferences', 'pr√©f√©rences email', 'preferences email',
                    'ne plus recevoir', 'stop emails', 'arreter les emails',
                    'vous ne souhaitez plus recevoir', 'ne souhaitez plus recevoir',
                    'param√©trez vos choix', 'parametrez vos choix',
                    'newsletter', 'mailing list', 'mailing',
                    'this email was sent to', 'you are receiving this',
                    'limited offer', 'offre limit√©e', 'special offer',
                    'promotion', 'promo', 'soldes', 'vente priv√©e',
                    'ventes en ligne', 'vente en ligne', 'shopping',
                    'disable these notifications', 'turn off notifications',
                    'manage notifications', 'notification settings',
                    'email settings', 'communication preferences',
                    'update your preferences', 'modify your subscription'
                ],
                strong: [
                    'promo', 'deal', 'offer', 'sale', 'discount', 'r√©duction',
                    'newsletter', 'mailing', 'campaign', 'marketing',
                    'exclusive', 'special', 'limited', 'new', 'nouveau',
                    'boutique', 'shopping', 'acheter', 'commander',
                    'offre', 'promotion', 'remise', 'solde',
                    'notifications', 'alerts', 'updates', 'subscribe'
                ],
                weak: ['update', 'discover', 'new', 'nouveaut√©', 'd√©couvrir']
            },

            security: {
                absolute: [
                    'alerte de connexion', 'alert connexion', 'nouvelle connexion',
                    'activit√© suspecte', 'suspicious activity', 'login alert',
                    'new sign-in', 'sign in detected', 'connexion d√©tect√©e',
                    'code de v√©rification', 'verification code', 'security code',
                    'two-factor', '2fa', 'authentification', 'authentication',
                    'password reset', 'r√©initialisation mot de passe'
                ],
                strong: [
                    's√©curit√©', 'security', 'v√©rification', 'verify',
                    'authentification', 'password', 'mot de passe'
                ],
                weak: ['compte', 'account', 'acc√®s']
            },

            tasks: {
                absolute: [
                    'action required', 'action requise', 'action needed',
                    'please complete', 'veuillez compl√©ter', 'to do',
                    'task assigned', 't√¢che assign√©e', 'deadline',
                    'due date', '√©ch√©ance', 'livrable',
                    'urgence', 'urgent', 'tr√®s urgent',
                    'demande update', 'update request', 'mise √† jour demand√©e',
                    'demande de mise √† jour', 'update needed', 'mise a jour requise',
                    'correction requise', '√† corriger', 'please review',
                    'merci de valider', 'validation requise', 'approval needed'
                ],
                strong: [
                    'urgent', 'asap', 'priority', 'priorit√©',
                    'complete', 'compl√©ter', 'action', 'faire',
                    'update', 'mise √† jour', 'demande', 'request',
                    'task', 't√¢che', 'todo', '√† faire',
                    'correction', 'corriger', 'modifier', 'r√©vision'
                ],
                weak: ['demande', 'besoin', 'attente', 'request', 'need', 'waiting']
            },

            meetings: {
                absolute: [
                    'demande de r√©union', 'meeting request', 'r√©union',
                    'schedule a meeting', 'planifier une r√©union',
                    'invitation r√©union', 'meeting invitation',
                    'teams meeting', 'zoom meeting', 'google meet',
                    'rendez-vous', 'appointment', 'rdv'
                ],
                strong: [
                    'meeting', 'r√©union', 'schedule', 'planifier',
                    'calendar', 'calendrier', 'appointment', 'agenda',
                    'conf√©rence', 'conference', 'call'
                ],
                weak: ['pr√©sentation', 'agenda', 'disponible', 'available']
            },

            commercial: {
                absolute: [
                    'devis', 'quotation', 'proposal', 'proposition',
                    'contrat', 'contract', 'bon de commande',
                    'purchase order', 'offre commerciale',
                    'opportunity', 'opportunit√©', 'lead'
                ],
                strong: [
                    'client', 'customer', 'prospect', 'opportunity',
                    'commercial', 'business', 'march√©', 'deal',
                    'vente', 'sales', 'n√©gociation'
                ],
                weak: ['offre', 'n√©gociation', 'discussion', 'projet']
            },

            finance: {
                absolute: [
                    'facture', 'invoice', 'payment', 'paiement',
                    'virement', 'transfer', 'remboursement', 'refund',
                    'relev√© bancaire', 'bank statement',
                    'd√©claration fiscale', 'tax declaration',
                    'n¬∞commande', 'num√©ro commande', 'order number',
                    'num√©ro de commande', 'commande n¬∞', 'commande num√©ro',
                    'livraison commande', 'commande exp√©di√©e',
                    'confirmation commande', 'order confirmation'
                ],
                strong: [
                    'montant', 'amount', 'total', 'facture',
                    'fiscal', 'bancaire', 'bank', 'finance',
                    'commande', 'order', 'achat', 'vente',
                    'livraison', 'delivery', 'exp√©dition', 'shipping',
                    'prix', 'price', 'co√ªt', 'cost'
                ],
                weak: ['euro', 'dollar', 'prix', 'payment', 'transaction']
            },

            project: {
                absolute: [
                    'projet xx', 'project update', 'milestone',
                    'sprint', 'livrable projet', 'gantt',
                    'avancement projet', 'project status',
                    'kickoff', 'retrospective', 'roadmap',
                    'document corrig√©', 'version corrig√©e', 'corrections apport√©es'
                ],
                strong: [
                    'projet', 'project', 'milestone', 'sprint',
                    'agile', 'scrum', 'kanban', 'jira',
                    'development', 'd√©veloppement',
                    'document', 'pr√©sentation', 'correction'
                ],
                weak: ['development', 'phase', '√©tape', 'planning', 'pr√©sentation']
            },

            reminders: {
                absolute: [
                    'reminder:', 'rappel:', 'follow up', 'relance',
                    'gentle reminder', 'rappel amical', 'following up',
                    'je reviens vers vous', 'circling back',
                    'comme convenu', 'as discussed'
                ],
                strong: [
                    'reminder', 'rappel', 'follow', 'relance',
                    'suite', 'convenu', 'discussed', 'pending'
                ],
                weak: ['previous', 'discussed', 'encore', 'still']
            },

            support: {
                absolute: [
                    'ticket #', 'ticket number', 'num√©ro de ticket',
                    'case #', 'case number', 'incident #',
                    'probl√®me r√©solu', 'issue resolved',
                    'support ticket', 'demande de support'
                ],
                strong: [
                    'support', 'assistance', 'help desk',
                    'technical support', 'ticket', 'incident',
                    'probl√®me', 'problem', 'issue'
                ],
                weak: ['help', 'aide', 'issue', 'question']
            },

            hr: {
                absolute: [
                    'bulletin de paie', 'payslip', 'contrat de travail',
                    'cong√©s', 'leave request', 'onboarding',
                    'entretien annuel', 'performance review',
                    'ressources humaines', 'human resources',
                    'offre d\'emploi', 'job offer', 'recrutement'
                ],
                strong: [
                    'rh', 'hr', 'salaire', 'salary',
                    'ressources humaines', 'human resources',
                    'contrat', 'paie', 'cong√©s', 'vacation',
                    'emploi', 'job', 'recruitment'
                ],
                weak: ['employee', 'staff', 'personnel', '√©quipe']
            },

            internal: {
                absolute: [
                    'all staff', 'tout le personnel', 'annonce interne',
                    'company announcement', 'memo interne',
                    'communication interne', 'note de service',
                    '√† tous', 'to all employees'
                ],
                strong: [
                    'internal', 'interne', 'company wide',
                    'personnel', 'staff', '√©quipe',
                    'annonce', 'announcement'
                ],
                weak: ['annonce', 'announcement', 'information', 'update']
            },

            notifications: {
                absolute: [
                    'do not reply', 'ne pas r√©pondre', 'noreply@',
                    'automated message', 'notification automatique',
                    'system notification', 'ceci est un message automatique',
                    'no-reply@', 'donotreply@'
                ],
                strong: [
                    'automated', 'automatic', 'system',
                    'notification', 'automatique', 'alert'
                ],
                weak: ['notification', 'alert', 'info']
            },

            cc: {
                absolute: [
                    'copie pour information', 'for your information', 'fyi',
                    'en copie', 'in copy', 'cc:', 'courtesy copy',
                    'pour info', 'pour information'
                ],
                strong: ['information', 'copie', 'copy', 'cc'],
                weak: ['fyi', 'info']
            }
        };
    }

    // ================================================
    // GESTION DES PARAM√àTRES
    // ================================================
    loadSettings() {
        try {
            const saved = localStorage.getItem('categorySettings');
            const defaultSettings = this.getDefaultSettings();
            
            if (saved) {
                const parsedSettings = JSON.parse(saved);
                return { ...defaultSettings, ...parsedSettings };
            }
            
            return defaultSettings;
        } catch (error) {
            console.error('[CategoryManager] Erreur chargement param√®tres:', error);
            return this.getDefaultSettings();
        }
    }

    getDefaultSettings() {
        return {
            activeCategories: null, // null = toutes actives
            taskPreselectedCategories: [],
            categoryExclusions: {
                domains: [],
                emails: []
            },
            scanSettings: {
                defaultPeriod: 7,
                defaultFolder: 'inbox',
                autoAnalyze: true,
                autoCategrize: true
            },
            automationSettings: {
                autoCreateTasks: false,
                groupTasksByDomain: false,
                skipDuplicates: true
            },
            preferences: {
                darkMode: false,
                compactView: false,
                showNotifications: true,
                excludeSpam: true,
                detectCC: true
            }
        };
    }

    saveSettings() {
        try {
            localStorage.setItem('categorySettings', JSON.stringify(this.settings));
            this.notifyListeners('settingsChanged', this.settings);
        } catch (error) {
            console.error('[CategoryManager] Erreur sauvegarde param√®tres:', error);
        }
    }

    // ================================================
    // API PUBLIQUE - ACC√àS AUX DONN√âES
    // ================================================
    
    // R√©cup√©rer toutes les cat√©gories
    getCategories() {
        return { ...this.categories };
    }
    
    // R√©cup√©rer une cat√©gorie sp√©cifique
    getCategory(categoryId) {
        if (categoryId === 'all') {
            return { id: 'all', name: 'Tous', icon: 'üìß', color: '#1e293b' };
        }
        if (categoryId === 'other') {
            return { id: 'other', name: 'Non class√©', icon: '‚ùì', color: '#64748b' };
        }
        if (categoryId === 'spam') {
            return { id: 'spam', name: 'Spam', icon: 'üö´', color: '#dc2626' };
        }
        if (categoryId === 'excluded') {
            return { id: 'excluded', name: 'Exclu', icon: 'üö´', color: '#6b7280' };
        }
        return this.categories[categoryId] || null;
    }
    
    // R√©cup√©rer tous les mots-cl√©s
    getAllKeywords() {
        return JSON.parse(JSON.stringify(this.weightedKeywords));
    }
    
    // R√©cup√©rer les mots-cl√©s d'une cat√©gorie
    getCategoryKeywords(categoryId) {
        return this.weightedKeywords[categoryId] ? 
            JSON.parse(JSON.stringify(this.weightedKeywords[categoryId])) : 
            { absolute: [], strong: [], weak: [] };
    }
    
    // R√©cup√©rer les cat√©gories actives
    getActiveCategories() {
        if (!this.settings.activeCategories) {
            return Object.keys(this.categories);
        }
        return [...this.settings.activeCategories];
    }
    
    // V√©rifier si une cat√©gorie est active
    isCategoryActive(categoryId) {
        const activeCategories = this.getActiveCategories();
        return activeCategories.includes(categoryId);
    }
    
    // R√©cup√©rer les cat√©gories pr√©-s√©lectionn√©es pour les t√¢ches
    getTaskPreselectedCategories() {
        return [...(this.settings.taskPreselectedCategories || [])];
    }
    
    // R√©cup√©rer tous les param√®tres
    getSettings() {
        return JSON.parse(JSON.stringify(this.settings));
    }
    
    // R√©cup√©rer les filtres d'une cat√©gorie
    getCategoryFilters(categoryId) {
        return this.categoryFilters[categoryId] || {
            includeDomains: [],
            excludeDomains: [],
            includeEmails: [],
            excludeEmails: []
        };
    }

    // ================================================
    // API PUBLIQUE - MISE √Ä JOUR DES DONN√âES
    // ================================================
    
    // Mettre √† jour les param√®tres
    updateSettings(newSettings) {
        this.settings = { ...this.settings, ...newSettings };
        this.saveSettings();
    }
    
    // Mettre √† jour les cat√©gories actives
    updateActiveCategories(categories) {
        this.settings.activeCategories = [...categories];
        this.saveSettings();
    }
    
    // Mettre √† jour les cat√©gories pr√©-s√©lectionn√©es pour les t√¢ches
    updateTaskPreselectedCategories(categories) {
        this.settings.taskPreselectedCategories = [...categories];
        this.saveSettings();
        return this.settings.taskPreselectedCategories;
    }
    
    // Mettre √† jour les mots-cl√©s d'une cat√©gorie
    updateCategoryKeywords(categoryId, keywords) {
        if (!this.categories[categoryId]) {
            throw new Error('Cat√©gorie non trouv√©e');
        }
        
        // Simplification : pas d'exclusions
        this.weightedKeywords[categoryId] = {
            absolute: keywords.absolute || [],
            strong: keywords.strong || [],
            weak: keywords.weak || []
        };
        
        // Si c'est une cat√©gorie personnalis√©e, sauvegarder
        if (this.customCategories[categoryId]) {
            this.customCategories[categoryId].keywords = this.weightedKeywords[categoryId];
            this.saveCustomCategories();
        }
        
        this.notifyListeners('keywordsUpdated', { categoryId, keywords: this.weightedKeywords[categoryId] });
    }
    
    // Mettre √† jour les filtres d'une cat√©gorie
    updateCategoryFilters(categoryId, filters) {
        if (!this.categories[categoryId]) {
            throw new Error('Cat√©gorie non trouv√©e');
        }
        
        this.categoryFilters[categoryId] = {
            includeDomains: filters.includeDomains || [],
            excludeDomains: filters.excludeDomains || [],
            includeEmails: filters.includeEmails || [],
            excludeEmails: filters.excludeEmails || []
        };
        
        this.saveCategoryFilters();
        this.notifyListeners('filtersUpdated', { categoryId, filters: this.categoryFilters[categoryId] });
    }

    // ================================================
    // GESTION DES CAT√âGORIES PERSONNALIS√âES
    // ================================================
    
    createCustomCategory(categoryData) {
        const id = this.generateCategoryId(categoryData.name);
        
        const category = {
            id: id,
            name: categoryData.name,
            icon: categoryData.icon || 'üìÇ',
            color: categoryData.color || '#6366f1',
            description: categoryData.description || '',
            createdAt: new Date().toISOString(),
            isCustom: true,
            keywords: {
                absolute: categoryData.keywords?.absolute || [],
                strong: categoryData.keywords?.strong || [],
                weak: categoryData.keywords?.weak || []
            }
        };

        this.customCategories[id] = category;
        this.categories[id] = category;
        
        // Initialiser les mots-cl√©s
        this.weightedKeywords[id] = category.keywords;

        this.saveCustomCategories();
        this.notifyListeners('categoryCreated', { categoryId: id, category });
        
        return category;
    }
    
    updateCustomCategory(categoryId, updates) {
        if (!this.customCategories[categoryId]) {
            throw new Error('Cat√©gorie personnalis√©e non trouv√©e');
        }

        const updatedCategory = {
            ...this.customCategories[categoryId],
            ...updates,
            updatedAt: new Date().toISOString()
        };

        this.customCategories[categoryId] = updatedCategory;
        this.categories[categoryId] = updatedCategory;
        
        if (updates.keywords) {
            this.weightedKeywords[categoryId] = {
                absolute: updates.keywords.absolute || [],
                strong: updates.keywords.strong || [],
                weak: updates.keywords.weak || []
            };
        }

        this.saveCustomCategories();
        this.notifyListeners('categoryUpdated', { categoryId, category: updatedCategory });
        
        return updatedCategory;
    }
    
    deleteCustomCategory(categoryId) {
        if (!this.customCategories[categoryId]) {
            throw new Error('Cat√©gorie personnalis√©e non trouv√©e');
        }

        // Retirer des cat√©gories pr√©-s√©lectionn√©es si pr√©sente
        if (this.settings.taskPreselectedCategories?.includes(categoryId)) {
            this.updateTaskPreselectedCategories(
                this.settings.taskPreselectedCategories.filter(id => id !== categoryId)
            );
        }

        // Retirer des cat√©gories actives si pr√©sente
        if (this.settings.activeCategories?.includes(categoryId)) {
            this.updateActiveCategories(
                this.settings.activeCategories.filter(id => id !== categoryId)
            );
        }

        delete this.customCategories[categoryId];
        delete this.categories[categoryId];
        delete this.weightedKeywords[categoryId];
        delete this.categoryFilters[categoryId];

        this.saveCustomCategories();
        this.notifyListeners('categoryDeleted', { categoryId });
    }

    // ================================================
    // PERSISTANCE DES DONN√âES
    // ================================================
    
    loadCustomCategories() {
        try {
            const saved = localStorage.getItem('customCategories');
            this.customCategories = saved ? JSON.parse(saved) : {};
            
            Object.entries(this.customCategories).forEach(([id, category]) => {
                this.categories[id] = {
                    ...category,
                    isCustom: true
                };
                
                if (category.keywords) {
                    this.weightedKeywords[id] = {
                        absolute: category.keywords.absolute || [],
                        strong: category.keywords.strong || [],
                        weak: category.keywords.weak || []
                    };
                } else {
                    this.weightedKeywords[id] = {
                        absolute: [],
                        strong: [],
                        weak: []
                    };
                }
            });
            
            console.log('[CategoryManager] Cat√©gories personnalis√©es charg√©es:', Object.keys(this.customCategories).length);
        } catch (error) {
            console.error('[CategoryManager] Erreur chargement cat√©gories personnalis√©es:', error);
            this.customCategories = {};
        }
    }
    
    saveCustomCategories() {
        try {
            localStorage.setItem('customCategories', JSON.stringify(this.customCategories));
        } catch (error) {
            console.error('[CategoryManager] Erreur sauvegarde cat√©gories personnalis√©es:', error);
        }
    }
    
    loadCategoryFilters() {
        try {
            const saved = localStorage.getItem('categoryFilters');
            this.categoryFilters = saved ? JSON.parse(saved) : {};
        } catch (error) {
            console.error('[CategoryManager] Erreur chargement filtres:', error);
            this.categoryFilters = {};
        }
    }
    
    saveCategoryFilters() {
        try {
            localStorage.setItem('categoryFilters', JSON.stringify(this.categoryFilters));
        } catch (error) {
            console.error('[CategoryManager] Erreur sauvegarde filtres:', error);
        }
    }

    // ================================================
    // SYST√àME DE NOTIFICATION
    // ================================================
    
    addChangeListener(callback) {
        this.changeListeners.add(callback);
        return () => this.changeListeners.delete(callback);
    }
    
    notifyListeners(event, data) {
        this.changeListeners.forEach(listener => {
            try {
                listener(event, data);
            } catch (error) {
                console.error('[CategoryManager] Erreur notification:', error);
            }
        });
        
        // Dispatch √©v√©nement global
        try {
            window.dispatchEvent(new CustomEvent(event, { 
                detail: { ...data, source: 'CategoryManager' }
            }));
        } catch (error) {
            console.error('[CategoryManager] Erreur dispatch event:', error);
        }
    }

    // ================================================
    // UTILITAIRES
    // ================================================
    
    generateCategoryId(name) {
        const base = name.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/[^a-z0-9]/g, '_')
            .replace(/_+/g, '_')
            .replace(/^_|_$/g, '');
        
        let id = 'custom_' + base;
        let counter = 1;
        
        while (this.categories[id]) {
            id = `custom_${base}_${counter}`;
            counter++;
        }
        
        return id;
    }
    
    // Ajout de mots-cl√©s individuels
    addKeywordToCategory(categoryId, keyword, type = 'strong') {
        if (!this.categories[categoryId]) {
            throw new Error('Cat√©gorie non trouv√©e');
        }

        if (!['absolute', 'strong', 'weak'].includes(type)) {
            type = 'strong';
        }

        if (!this.weightedKeywords[categoryId]) {
            this.weightedKeywords[categoryId] = { absolute: [], strong: [], weak: [] };
        }

        const normalizedKeyword = keyword.toLowerCase().trim();
        if (!this.weightedKeywords[categoryId][type].includes(normalizedKeyword)) {
            this.weightedKeywords[categoryId][type].push(normalizedKeyword);
            this.updateCategoryKeywords(categoryId, this.weightedKeywords[categoryId]);
        }
    }

    removeKeywordFromCategory(categoryId, keyword, type) {
        if (!this.categories[categoryId] || !this.weightedKeywords[categoryId]) {
            return;
        }

        if (this.weightedKeywords[categoryId][type]) {
            const normalizedKeyword = keyword.toLowerCase().trim();
            this.weightedKeywords[categoryId][type] = this.weightedKeywords[categoryId][type]
                .filter(k => k !== normalizedKeyword);
            this.updateCategoryKeywords(categoryId, this.weightedKeywords[categoryId]);
        }
    }
    
    // Statistiques
    getCategoryStats() {
        const stats = {
            totalCategories: Object.keys(this.categories).length,
            standardCategories: Object.keys(this.categories).filter(id => !this.categories[id].isCustom).length,
            customCategories: Object.keys(this.customCategories).length,
            activeCategories: this.getActiveCategories().length,
            preselectedCategories: this.settings.taskPreselectedCategories?.length || 0,
            totalKeywords: 0
        };
        
        Object.values(this.weightedKeywords).forEach(keywords => {
            stats.totalKeywords += (keywords.absolute?.length || 0) + 
                                  (keywords.strong?.length || 0) + 
                                  (keywords.weak?.length || 0);
        });
        
        return stats;
    }
    
    // Export/Import des donn√©es
    exportData() {
        return {
            version: '22.0',
            exportDate: new Date().toISOString(),
            settings: this.settings,
            customCategories: this.customCategories,
            categoryFilters: this.categoryFilters,
            customKeywords: Object.entries(this.weightedKeywords)
                .filter(([id]) => this.customCategories[id])
                .reduce((acc, [id, keywords]) => {
                    acc[id] = keywords;
                    return acc;
                }, {})
        };
    }
    
    importData(data) {
        try {
            if (data.settings) {
                this.settings = { ...this.settings, ...data.settings };
                this.saveSettings();
            }
            
            if (data.customCategories) {
                Object.entries(data.customCategories).forEach(([id, category]) => {
                    this.customCategories[id] = category;
                    this.categories[id] = { ...category, isCustom: true };
                });
                this.saveCustomCategories();
            }
            
            if (data.customKeywords) {
                Object.entries(data.customKeywords).forEach(([id, keywords]) => {
                    if (this.categories[id]) {
                        this.weightedKeywords[id] = keywords;
                    }
                });
            }
            
            if (data.categoryFilters) {
                this.categoryFilters = data.categoryFilters;
                this.saveCategoryFilters();
            }
            
            console.log('[CategoryManager] Import r√©ussi');
            return true;
        } catch (error) {
            console.error('[CategoryManager] Erreur import:', error);
            return false;
        }
    }
    
    // Nettoyage
    destroy() {
        this.changeListeners.clear();
        console.log('[CategoryManager] Instance d√©truite');
    }
}

// ================================================
// CR√âATION DE L'INSTANCE GLOBALE
// ================================================
if (window.categoryManager) {
    window.categoryManager.destroy?.();
}

window.categoryManager = new CategoryManager();

// Export pour les tests
window.CategoryManager = CategoryManager;

console.log('‚úÖ CategoryManager v22.0 loaded - Banque de donn√©es simplifi√©e');
console.log('üìö Pas de priorit√©s, pas d\'exclusions - EmailScanner g√®re toute la logique');
