// CategoryManager.js - Version 25.0 - D√âTECTION NEWSLETTER ULTRA-RENFORC√âE + AFFICHAGE CORRIG√â

class CategoryManager {
    constructor() {
        this.categories = {};
        this.keywordCatalog = {}; // UN SEUL CATALOGUE CENTRAL
        this.customCategories = {};
        this.settings = this.loadSettings();
        this.isInitialized = false;
        this.debugMode = false;
        
        // Syst√®me de synchronisation simplifi√©
        this.changeListeners = new Set();
        
        // Gestion des scans
        this.scanHistory = [];
        this.lastScanResults = null;
        this.scanProviders = {
            gmail: {
                name: 'Gmail',
                icon: 'fab fa-google',
                color: '#ea4335',
                priority: 1,
                methods: ['mailService', 'directGmail', 'googleAuthService']
            },
            outlook: {
                name: 'Outlook',
                icon: 'fab fa-microsoft', 
                color: '#0078d4',
                priority: 2,
                methods: ['mailService', 'directOutlook', 'authService']
            }
        };
        
        this.initializeCategories();
        this.loadCustomCategories();
        this.initializeKeywordCatalog(); // CATALOGUE ULTRA-RENFORC√â POUR NEWSLETTERS
        this.setupEventListeners();
        
        this.isInitialized = true;
        console.log('[CategoryManager] ‚úÖ Version 25.0 - D√©tection newsletter ULTRA-RENFORC√âE + Affichage corrig√©');
    }

    // ================================================
    // CATALOGUE DE MOTS-CL√âS - ULTRA-RENFORC√â POUR NEWSLETTERS
    // ================================================
    initializeKeywordCatalog() {
        console.log('[CategoryManager] üîç Initialisation catalogue ULTRA-RENFORC√â pour newsletters...');
        
        this.keywordCatalog = {
            // PRIORIT√â MAXIMALE ABSOLUE - MARKETING & NEWS - D√âTECTION ULTRA-RENFORC√âE
            marketing_news: {
                absolute: [
                    // === D√âSABONNEMENT - PRIORIT√â ABSOLUE ===
                    'se d√©sabonner', 'se desinscrire', 'd√©sinscrire', 'desinscrire',
                    'unsubscribe', 'opt out', 'opt-out', 'd√©sabonner', 'desabonner',
                    'g√©rer vos pr√©f√©rences', 'g√©rer la r√©ception', 'g√©rer mes pr√©f√©rences',
                    'email preferences', 'pr√©f√©rences email', 'preferences email',
                    'ne plus recevoir', 'stop emails', 'arreter les emails', 'arr√™ter les emails',
                    'vous ne souhaitez plus recevoir', 'ne souhaitez plus recevoir',
                    'param√©trez vos choix', 'parametrez vos choix',
                    'disable these notifications', 'turn off notifications',
                    'manage notifications', 'notification settings',
                    'email settings', 'communication preferences',
                    'update your preferences', 'modify your subscription',
                    'this email was sent to', 'you are receiving this',
                    'cet email vous a √©t√© envoy√©', 'vous recevez cet email',
                    'click here to unsubscribe', 'cliquez ici pour vous d√©sabonner',
                    'if you no longer wish to receive', 'si vous ne souhaitez plus recevoir',
                    'subscription preferences', 'pr√©f√©rences d\'abonnement',
                    'manage your subscription', 'g√©rer votre abonnement',
                    
                    // === NEWSLETTER EXPLICITES - ULTRA-RENFORC√â ===
                    'newsletter', 'newsletter hebdomadaire', 'newsletter mensuelle',
                    'newsletter quotidienne', 'weekly newsletter', 'monthly newsletter',
                    'daily newsletter', 'newsletter gratuite', 'free newsletter',
                    'notre newsletter', 'our newsletter', 'la newsletter',
                    'votre newsletter', 'your newsletter', 'this newsletter',
                    
                    // === MAILING ET DIFFUSION ===
                    'mailing list', 'mailing', 'e-mailing', 'emailing',
                    'liste de diffusion', 'diffusion email', 'email marketing',
                    'marketing email', 'campagne email', 'email campaign',
                    'mass email', 'email blast', 'bulk email',
                    
                    // === BULLETIN D'INFORMATION ===
                    'bulletin d\'information', 'lettre d\'information',
                    'bulletin √©lectronique', 'lettre √©lectronique',
                    'bulletin d\'actualit√©s', 'actualit√©s par email',
                    'infolettre', 'info-lettre', 'courrier √©lectronique',
                    
                    // === STRUCTURE NEWSLETTER ===
                    'view in browser', 'voir dans le navigateur', 'version web',
                    'web version', 'version navigateur', 'afficher dans navigateur',
                    'having trouble viewing', 'probl√®me d\'affichage',
                    
                    // === DOMAINES MARKETING SP√âCIALIS√âS ===
                    'mailchimp', 'sendgrid', 'mailgun', 'constant-contact',
                    'aweber', 'getresponse', 'campaign-monitor', 'sendinblue',
                    'klaviyo', 'convertkit', 'activecampaign', 'drip',
                    'infusionsoft', 'pardot', 'hubspot', 'marketo',
                    
                    // === NOREPLY ET AUTOMATIQUE ===
                    'noreply@', 'no-reply@', 'donotreply@', 'do-not-reply@',
                    'notifications@', 'updates@', 'news@', 'newsletter@',
                    'marketing@', 'promo@', 'offers@', 'deals@',
                    'automated message', 'message automatique',
                    'automatic notification', 'notification automatique',
                    
                    // === CONTENU PROMOTIONNEL EXPLICITE ===
                    'promotion exclusive', 'exclusive promotion', 'offre exclusive',
                    'exclusive offer', 'limited offer', 'offre limit√©e',
                    'special offer', 'offre sp√©ciale', 'deal of the day',
                    'affaire du jour', 'flash sale', 'vente flash',
                    'limited time', 'temps limit√©', 'expires soon', 'expire bient√¥t',
                    'shop now', 'acheter maintenant', 'buy now', 'achetez maintenant',
                    
                    // === E-COMMERCE ET RETAIL ===
                    'order confirmation', 'confirmation de commande',
                    'shipping confirmation', 'confirmation d\'exp√©dition',
                    'order shipped', 'commande exp√©di√©e', 'votre commande',
                    'your order', 'tracking number', 'num√©ro de suivi',
                    'cart reminder', 'rappel panier', 'abandoned cart',
                    'panier abandonn√©', 'complete your order',
                    
                    // === SERVICES CLOUD ET TECH - SP√âCIFIQUE ===
                    'google cloud platform', 'aws notifications', 'azure updates',
                    'cloud platform notifications', 'service updates',
                    'platform news', 'developer newsletter',
                    'api updates', 'service announcements',
                    
                    // === STREAMING ET DIVERTISSEMENT ===
                    'twitch notifications', 'youtube notifications',
                    'streaming notifications', 'new video', 'nouvelle vid√©o',
                    'live stream', 'direct live', 'streaming en direct',
                    'subscribe to channel', 'abonnez-vous √† la cha√Æne',
                    
                    // === ENCODAGE ET CARACT√àRES SP√âCIAUX - AJOUT CRITICAL ===
                    's√É¬©curit√É¬©', 'notificat√É¬©', 'pr√É¬©f√É¬©rences',
                    'd√É¬©sabonner', 'r√É¬©ception', '√É¬©quipe',
                    'confidentialit√É¬©', 'd√É¬©claration',
                    // Pour g√©rer les probl√®mes d'encodage UTF-8
                    's√©curit√©', 'notification', 'pr√©f√©rences',
                    'd√©sabonner', 'r√©ception', '√©quipe',
                    'confidentialit√©', 'd√©claration'
                ],
                
                strong: [
                    // Marketing g√©n√©ral
                    'marketing', 'publicity', 'publicit√©', 'advertising',
                    'campaign', 'campagne', 'promotion', 'promo',
                    'deal', 'offer', 'offre', 'sale', 'vente',
                    'discount', 'r√©duction', 'special', 'exclusive',
                    'limited', 'new', 'nouveau', 'latest', 'dernier',
                    
                    // E-commerce
                    'shop', 'boutique', 'store', 'magasin',
                    'shopping', 'acheter', 'buy', 'purchase',
                    'order', 'commander', 'cart', 'panier',
                    'checkout', 'payment', 'paiement',
                    
                    // Communication marketing
                    'newsletter', 'mailing', 'updates', 'news',
                    'alerts', 'notifications', 'subscribe', 'abonner',
                    'follow us', 'suivez-nous', 'social media',
                    
                    // Retail
                    'brand', 'marque', 'collection', 'catalog',
                    'catalogue', 'lookbook', 'trend', 'tendance',
                    'fashion', 'mode', 'style', 'design',
                    
                    // Cloud et tech
                    'platform', 'service', 'api', 'cloud',
                    'developer', 'd√©veloppeur', 'feature',
                    'fonctionnalit√©', 'release', 'version',
                    
                    // Streaming
                    'streaming', 'live', 'video', 'channel',
                    'cha√Æne', 'content', 'contenu', 'episode',
                    '√©pisode', 'show', '√©mission'
                ],
                
                weak: [
                    'update', 'discover', 'd√©couvrir', 'explore',
                    'learn more', 'en savoir plus', 'read more',
                    'download', 't√©l√©charger', 'free', 'gratuit',
                    'tips', 'conseils', 'guide', 'tutorial',
                    'how to', 'comment', 'best practices',
                    'meilleures pratiques', 'advice', 'avis',
                    'information', 'info', 'help', 'aide'
                ],
                
                exclusions: [
                    // √âviter les faux positifs - TR√àS R√âDUIT
                    'urgent task', 't√¢che urgente',
                    'security alert urgent', 'alerte s√©curit√© urgente',
                    'password expired urgent', 'mot de passe expir√© urgent',
                    'account suspended urgent', 'compte suspendu urgent'
                ]
            },

            // S√âCURIT√â - Cat√©gorie tr√®s sp√©cifique
            security: {
                absolute: [
                    'alerte de connexion', 'alert connexion', 'nouvelle connexion',
                    'activit√© suspecte', 'suspicious activity', 'login alert',
                    'new sign-in', 'sign in detected', 'connexion d√©tect√©e',
                    'code de v√©rification', 'verification code', 'security code',
                    'two-factor', '2fa', 'authentification', 'authentication',
                    'password reset', 'r√©initialisation mot de passe',
                    'compte compromis', 'account compromised',
                    'unusual activity', 'activit√© inhabituelle',
                    'security breach', 'violation s√©curit√©',
                    'unauthorized access', 'acc√®s non autoris√©'
                ],
                strong: [
                    's√©curit√©', 'security', 'v√©rification', 'verify',
                    'authentification', 'password', 'mot de passe',
                    'login', 'connexion', 'access', 'acc√®s',
                    'compte', 'account', 'breach', 'violation'
                ],
                weak: [
                    'user', 'utilisateur', 'protection', 'secure'
                ],
                exclusions: [
                    'newsletter', 'unsubscribe', 'promotion', 'marketing',
                    'shop', 'buy', 'order', 'purchase', 'sale',
                    'mailing list', 'email preferences'
                ]
            },

            // T√ÇCHES ET ACTIONS
            tasks: {
                absolute: [
                    'action required', 'action requise', 'action needed',
                    'please complete', 'veuillez compl√©ter', 'to do',
                    'task assigned', 't√¢che assign√©e', 'deadline',
                    'due date', '√©ch√©ance', 'livrable', 'deliverable',
                    'urgence', 'urgent', 'tr√®s urgent', 'priority',
                    'demande update', 'update request', 'mise √† jour demand√©e',
                    'correction requise', '√† corriger', 'please review',
                    'merci de valider', 'validation requise', 'approval needed',
                    'please confirm', 'veuillez confirmer'
                ],
                strong: [
                    'urgent', 'asap', 'priority', 'priorit√©',
                    'complete', 'compl√©ter', 'action', 'faire',
                    'update', 'mise √† jour', 'demande', 'request',
                    'task', 't√¢che', 'todo', '√† faire',
                    'correction', 'corriger', 'modifier', 'r√©vision',
                    'deadline', '√©ch√©ance', 'due', 'livrable'
                ],
                weak: [
                    'demande', 'besoin', 'attente', 'need', 'waiting'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'promotion', 'unsubscribe',
                    'shop', 'buy', 'order', 'sale', 'mailing list'
                ]
            },

            // FINANCE
            finance: {
                absolute: [
                    'facture', 'invoice', 'payment', 'paiement',
                    'virement', 'transfer', 'remboursement', 'refund',
                    'relev√© bancaire', 'bank statement',
                    'd√©claration fiscale', 'tax declaration',
                    'payment due', '√©ch√©ance paiement',
                    'overdue', 'en retard', 'unpaid', 'impay√©',
                    'credit card', 'carte de cr√©dit',
                    'bank notification', 'notification bancaire'
                ],
                strong: [
                    'montant', 'amount', 'total', 'price', 'prix',
                    'fiscal', 'bancaire', 'bank', 'finance',
                    'euro', 'dollar', 'currency', 'devise',
                    'transaction', 'debit', 'credit', 'solde'
                ],
                weak: [
                    'money', 'argent', 'cost', 'co√ªt', 'fee'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'promotion', 'shop',
                    'mailing list', 'unsubscribe'
                ]
            },

            // R√âUNIONS
            meetings: {
                absolute: [
                    'demande de r√©union', 'meeting request', 'r√©union',
                    'schedule a meeting', 'planifier une r√©union',
                    'invitation r√©union', 'meeting invitation',
                    'teams meeting', 'zoom meeting', 'google meet',
                    'rendez-vous', 'appointment', 'rdv',
                    'calendar invitation', 'invitation calendrier'
                ],
                strong: [
                    'meeting', 'r√©union', 'schedule', 'planifier',
                    'calendar', 'calendrier', 'appointment',
                    'agenda', 'conf√©rence', 'conference', 'call',
                    'webinar', 'pr√©sentation'
                ],
                weak: [
                    'disponible', 'available', 'time', 'temps'
                ],
                exclusions: [
                    'newsletter', 'promotion', 'marketing', 'shop'
                ]
            },

            // COMMERCIAL
            commercial: {
                absolute: [
                    'devis', 'quotation', 'proposal', 'proposition',
                    'contrat', 'contract', 'bon de commande',
                    'purchase order', 'offre commerciale',
                    'opportunity', 'opportunit√©', 'lead',
                    'n√©gociation', 'negotiation'
                ],
                strong: [
                    'client', 'customer', 'prospect', 'opportunity',
                    'commercial', 'business', 'march√©', 'deal',
                    'vente', 'sales', 'n√©gociation', 'contract'
                ],
                weak: [
                    'offre', 'discussion', 'projet', 'partnership'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'promotion', 'unsubscribe'
                ]
            },

            // SUPPORT
            support: {
                absolute: [
                    'ticket #', 'ticket number', 'num√©ro de ticket',
                    'case #', 'case number', 'incident #',
                    'probl√®me r√©solu', 'issue resolved',
                    'support ticket', 'demande de support',
                    'help desk', 'service client'
                ],
                strong: [
                    'support', 'assistance', 'help', 'aide',
                    'technical support', 'ticket', 'incident',
                    'probl√®me', 'problem', 'issue', 'bug'
                ],
                weak: [
                    'question', 'help', 'assistance'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'promotion'
                ]
            },

            // RH
            hr: {
                absolute: [
                    'bulletin de paie', 'payslip', 'contrat de travail',
                    'cong√©s', 'leave request', 'onboarding',
                    'entretien annuel', 'performance review',
                    'ressources humaines', 'human resources',
                    'offre d\'emploi', 'job offer', 'recrutement'
                ],
                strong: [
                    'rh', 'hr', 'salaire', 'salary',
                    'ressources humaines', 'human resources',
                    'contrat', 'paie', 'cong√©s', 'vacation',
                    'emploi', 'job', 'recruitment'
                ],
                weak: [
                    'employee', 'staff', 'personnel', '√©quipe'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'promotion'
                ]
            },

            // RELANCES
            reminders: {
                absolute: [
                    'reminder:', 'rappel:', 'follow up', 'relance',
                    'gentle reminder', 'rappel amical', 'following up',
                    'je reviens vers vous', 'circling back',
                    'comme convenu', 'as discussed'
                ],
                strong: [
                    'reminder', 'rappel', 'follow', 'relance',
                    'suite', 'convenu', 'discussed', 'pending'
                ],
                weak: [
                    'previous', 'encore', 'still', 'toujours'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'promotion'
                ]
            },

            // PROJETS
            project: {
                absolute: [
                    'projet', 'project update', 'milestone',
                    'sprint', 'livrable projet', 'gantt',
                    'avancement projet', 'project status',
                    'kickoff', 'retrospective', 'roadmap'
                ],
                strong: [
                    'projet', 'project', 'milestone', 'sprint',
                    'agile', 'scrum', 'kanban', 'jira',
                    'development', 'd√©veloppement'
                ],
                weak: [
                    'phase', '√©tape', 'planning'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'promotion'
                ]
            },

            // COMMUNICATION INTERNE
            internal: {
                absolute: [
                    'all staff', 'tout le personnel', 'annonce interne',
                    'company announcement', 'memo interne',
                    'communication interne', 'note de service',
                    '√† tous', 'to all employees'
                ],
                strong: [
                    'internal', 'interne', 'company wide',
                    'personnel', 'staff', '√©quipe',
                    'annonce', 'announcement'
                ],
                weak: [
                    'information', 'update', 'news'
                ],
                exclusions: [
                    'newsletter', 'marketing', 'external', 'client'
                ]
            },

            // NOTIFICATIONS SYST√àME - PRIORIT√â R√âDUITE
            notifications: {
                absolute: [
                    'do not reply', 'ne pas r√©pondre',
                    'automated message', 'notification automatique',
                    'system notification', 'ceci est un message automatique',
                    'auto-reply', 'automatic reply', 'r√©ponse automatique',
                    'system alert', 'alerte syst√®me',
                    'server notification', 'notification serveur',
                    'maintenance notification', 'notification maintenance',
                    'backup notification', 'notification sauvegarde',
                    'system status', 'statut syst√®me'
                ],
                strong: [
                    'automated', 'automatic', 'automatique', 'system',
                    'notification', 'alert', 'alerte', 'reminder',
                    'rappel', 'status', 'statut'
                ],
                weak: [
                    'info', 'information', 'notice', 'avis'
                ],
                exclusions: [
                    // RENFORC√â pour √©viter conflit avec newsletter
                    'newsletter', 'unsubscribe', 'promotion', 'offer',
                    'shop', 'buy', 'purchase', 'sale', 'deal',
                    'marketing', 'campaign', 'advertising',
                    'mailing list', 'email preferences', 'subscription',
                    'discount', 'special offer', 'limited time',
                    'exclusive', 'promo', 'code promo',
                    'new arrivals', 'nouveaut√©s', 'flash sale',
                    'vente flash', 'soldes', 'r√©duction',
                    'follow us', 'social media', 'facebook',
                    'twitter', 'instagram', 'view in browser'
                ]
            },

            // EN COPIE - PRIORIT√â FAIBLE
            cc: {
                absolute: [
                    'copie pour information', 'for your information', 'fyi',
                    'en copie', 'in copy', 'cc:', 'courtesy copy',
                    'pour info', 'pour information'
                ],
                strong: [
                    'information', 'copie', 'copy', 'cc', 'fyi'
                ],
                weak: [
                    'info'
                ],
                exclusions: [
                    'urgent', 'action required', 'payment', 'newsletter'
                ]
            }
        };

        console.log('[CategoryManager] ‚úÖ Catalogue ULTRA-RENFORC√â initialis√© pour', Object.keys(this.keywordCatalog).length, 'cat√©gories avec focus newsletter ABSOLU');
    }

    // ================================================
    // ANALYSE EMAIL - NEWSLETTER PRIORIT√â ABSOLUE RENFORC√âE
    // ================================================
    analyzeEmail(email) {
        if (!email) return { category: 'other', score: 0, confidence: 0 };
        
        if (this.shouldExcludeSpam() && this.isSpamEmail(email)) {
            return { category: 'spam', score: 0, confidence: 0, isSpam: true };
        }
        
        const content = this.extractCompleteContentEnhanced(email);
        
        // V√©rifier les exclusions globales
        if (this.isGloballyExcluded(content, email)) {
            return { category: 'excluded', score: 0, confidence: 0, isExcluded: true };
        }
        
        // D√âTECTION NEWSLETTER ULTRA-PRIORITAIRE - PLUSIEURS M√âTHODES
        const newsletterResult = this.detectNewsletterUltraEnhanced(content, email);
        if (newsletterResult) {
            console.log(`[CategoryManager] üì∞ NEWSLETTER D√âTECT√âE: ${email.subject?.substring(0, 50)} (Score: ${newsletterResult.score})`);
            return newsletterResult;
        }
        
        // PRIORIT√â 1: MARKETING/NEWSLETTER - ANALYSE STANDARD RENFORC√âE
        const marketingAnalysis = this.analyzeCategory(content, this.keywordCatalog.marketing_news);
        
        // Si d√©tection marketing forte, retourner imm√©diatement avec seuil R√âDUIT
        if (marketingAnalysis.hasAbsolute || marketingAnalysis.total >= 40) { // Seuil R√âDUIT de 60 √† 40
            console.log(`[CategoryManager] ‚úÖ Marketing/Newsletter d√©tect√©: ${email.subject?.substring(0, 50)} (${marketingAnalysis.total}pts)`);
            return {
                category: 'marketing_news',
                score: marketingAnalysis.total,
                confidence: this.calculateConfidence(marketingAnalysis),
                matchedPatterns: marketingAnalysis.matches,
                hasAbsolute: marketingAnalysis.hasAbsolute,
                priorityDetection: 'marketing_standard'
            };
        }
        
        // V√©rifier si on est destinataire principal ou en CC
        const isMainRecipient = this.isMainRecipient(email);
        const isInCC = this.isInCC(email);
        
        // Si on est en CC ET pas de marketing d√©tect√©
        if (this.shouldDetectCC() && isInCC && !isMainRecipient) {
            const allResults = this.analyzeAllCategoriesExceptMarketing(content);
            const bestNonCC = Object.values(allResults)
                .filter(r => r.category !== 'cc')
                .sort((a, b) => b.score - a.score)[0];
            
            if (bestNonCC && bestNonCC.score >= 100 && bestNonCC.hasAbsolute) {
                return {
                    category: bestNonCC.category,
                    score: bestNonCC.score,
                    confidence: bestNonCC.confidence,
                    matchedPatterns: bestNonCC.matches,
                    hasAbsolute: bestNonCC.hasAbsolute,
                    isCC: true
                };
            }
            
            return {
                category: 'cc',
                score: 100,
                confidence: 0.95,
                matchedPatterns: [{ keyword: 'email_in_cc', type: 'detected', score: 100 }],
                hasAbsolute: true,
                isCC: true
            };
        }
        
        // Analyser toutes les cat√©gories (sauf marketing d√©j√† fait)
        const allResults = this.analyzeAllCategoriesExceptMarketing(content);
        
        // Ajouter le r√©sultat marketing avec priorit√© maximale
        allResults.marketing_news = {
            category: 'marketing_news',
            score: marketingAnalysis.total,
            hasAbsolute: marketingAnalysis.hasAbsolute,
            matches: marketingAnalysis.matches,
            confidence: this.calculateConfidence(marketingAnalysis),
            priority: 100 // Priorit√© maximale ABSOLUE
        };
        
        const selectedResult = this.selectByPriorityWithThreshold(allResults);
        
        if (!selectedResult || selectedResult.category === 'other' || selectedResult.score === 0) {
            return {
                category: 'other',
                score: 0,
                confidence: 0,
                matchedPatterns: [],
                hasAbsolute: false,
                reason: 'no_category_matched'
            };
        }
        
        return selectedResult;
    }

    // ================================================
    // D√âTECTION NEWSLETTER ULTRA-RENFORC√âE - NOUVELLE M√âTHODE
    // ================================================
    detectNewsletterUltraEnhanced(content, email) {
        let totalScore = 0;
        const matches = [];
        let hasUltraStrong = false;
        
        // === M√âTHODE 1: D√âTECTION PAR ADRESSE EMAIL ===
        const senderAddress = email.from?.emailAddress?.address?.toLowerCase() || '';
        const senderName = email.from?.emailAddress?.name?.toLowerCase() || '';
        
        // Domaines newsletter absolus
        const newsletterDomains = [
            'mailchimp.com', 'sendgrid.net', 'constantcontact.com',
            'aweber.com', 'getresponse.com', 'campaign-monitor.com',
            'sendinblue.com', 'klaviyo.com', 'convertkit.com',
            'activecampaign.com', 'drip.com', 'infusionsoft.com',
            'pardot.com', 'hubspot.com', 'marketo.com',
            'eloqua.com', 'responsys.com', 'exacttarget.com',
            'silverpop.com', 'mailgun.com', 'postmark.com'
        ];
        
        // V√©rification domaine
        const domain = this.extractDomain(senderAddress);
        if (newsletterDomains.some(nd => domain.includes(nd))) {
            totalScore += 200;
            hasUltraStrong = true;
            matches.push({ keyword: 'newsletter_domain', type: 'ultra_strong', score: 200 });
        }
        
        // Adresses noreply
        const noreplyPatterns = [
            'noreply', 'no-reply', 'donotreply', 'do-not-reply',
            'notifications', 'updates', 'news', 'newsletter',
            'marketing', 'promo', 'offers', 'deals'
        ];
        
        if (noreplyPatterns.some(pattern => senderAddress.includes(pattern))) {
            totalScore += 150;
            hasUltraStrong = true;
            matches.push({ keyword: 'noreply_address', type: 'ultra_strong', score: 150 });
        }
        
        // === M√âTHODE 2: HEADER "SE D√âSABONNER" ===
        // Gmail affiche souvent "Se d√©sabonner" dans l'interface √† c√¥t√© de l'adresse
        if (content.text.includes('se d√©sabonner') || content.text.includes('unsubscribe')) {
            totalScore += 180;
            hasUltraStrong = true;
            matches.push({ keyword: 'unsubscribe_header', type: 'ultra_strong', score: 180 });
        }
        
        // === M√âTHODE 3: D√âTECTION PAR SUJET ===
        const subject = content.subject;
        
        // Patterns de sujet newsletter
        const subjectNewsletterPatterns = [
            /newsletter/i, /bulletin/i, /actualit√©s/i, /news/i,
            /updates/i, /mises √† jour/i, /informations/i,
            /communication/i, /annonces/i, /nouveaut√©s/i,
            /promotion/i, /offre/i, /special/i, /exclusive/i,
            /limited/i, /flash/i, /deal/i, /sale/i,
            /notification/i, /alert/i, /reminder/i,
            /confirmation/i, /update/i, /weekly/i, /monthly/i,
            /daily/i, /hebdomadaire/i, /mensuel/i, /quotidien/i
        ];
        
        let subjectMatches = 0;
        subjectNewsletterPatterns.forEach(pattern => {
            if (pattern.test(subject)) {
                subjectMatches++;
                totalScore += 60;
                matches.push({ keyword: pattern.source, type: 'subject_strong', score: 60 });
            }
        });
        
        if (subjectMatches >= 2) {
            totalScore += 100;
            hasUltraStrong = true;
            matches.push({ keyword: 'multiple_subject_patterns', type: 'ultra_strong', score: 100 });
        }
        
        // === M√âTHODE 4: CONTENU NEWSLETTER SP√âCIFIQUE ===
        const newsletterContentPatterns = [
            'view in browser', 'voir dans le navigateur',
            'having trouble viewing', 'probl√®me d\'affichage',
            'follow us on', 'suivez-nous sur',
            'you are receiving this', 'vous recevez cet email',
            'mailing list', 'liste de diffusion',
            'email preferences', 'pr√©f√©rences email',
            'manage subscription', 'g√©rer abonnement'
        ];
        
        let contentMatches = 0;
        newsletterContentPatterns.forEach(pattern => {
            if (content.text.includes(pattern.toLowerCase())) {
                contentMatches++;
                totalScore += 40;
                matches.push({ keyword: pattern, type: 'content_strong', score: 40 });
            }
        });
        
        if (contentMatches >= 3) {
            totalScore += 80;
            hasUltraStrong = true;
            matches.push({ keyword: 'multiple_content_patterns', type: 'ultra_strong', score: 80 });
        }
        
        // === M√âTHODE 5: STRUCTURE HTML NEWSLETTER ===
        if (content.hasHtml) {
            const htmlIndicators = [
                'table', 'style=', 'background-color', 'font-family',
                'text-align', 'border', 'padding', 'margin',
                'href=', 'img src=', 'alt=', 'title='
            ];
            
            let htmlScore = 0;
            htmlIndicators.forEach(indicator => {
                if (content.text.includes(indicator)) {
                    htmlScore += 5;
                }
            });
            
            if (htmlScore >= 20) {
                totalScore += 60;
                matches.push({ keyword: 'html_structure', type: 'structure', score: 60 });
            }
        }
        
        // === M√âTHODE 6: D√âTECTION R√âSEAUX SOCIAUX ===
        const socialPatterns = [
            'facebook.com', 'twitter.com', 'instagram.com',
            'linkedin.com', 'youtube.com', 'tiktok.com',
            'follow us', 'suivez-nous', 'social media',
            'r√©seaux sociaux'
        ];
        
        let socialMatches = 0;
        socialPatterns.forEach(pattern => {
            if (content.text.includes(pattern.toLowerCase())) {
                socialMatches++;
                totalScore += 25;
            }
        });
        
        if (socialMatches >= 2) {
            totalScore += 50;
            matches.push({ keyword: 'social_media_presence', type: 'strong', score: 50 });
        }
        
        // === M√âTHODE 7: D√âTECTION PROMOTIONNELLE ===
        const promoPatterns = [
            'shop now', 'acheter maintenant', 'buy now',
            'order now', 'commandez maintenant',
            'limited time', 'temps limit√©',
            'expires soon', 'expire bient√¥t',
            'special offer', 'offre sp√©ciale',
            'exclusive', 'exclusif', 'deal', 'promotion'
        ];
        
        let promoMatches = 0;
        promoPatterns.forEach(pattern => {
            if (content.text.includes(pattern.toLowerCase())) {
                promoMatches++;
                totalScore += 35;
            }
        });
        
        if (promoMatches >= 2) {
            totalScore += 70;
            matches.push({ keyword: 'promotional_content', type: 'strong', score: 70 });
        }
        
        // === M√âTHODE 8: D√âTECTION RECIPIENTS MULTIPLES ===
        const toCount = email.toRecipients ? email.toRecipients.length : 0;
        const ccCount = email.ccRecipients ? email.ccRecipients.length : 0;
        const totalRecipients = toCount + ccCount;
        
        if (totalRecipients > 5) {
            totalScore += 80;
            matches.push({ keyword: 'multiple_recipients', type: 'recipients', score: 80 });
        } else if (totalRecipients > 1) {
            totalScore += 30;
            matches.push({ keyword: 'some_recipients', type: 'recipients', score: 30 });
        }
        
        // === M√âTHODE 9: SERVICES SP√âCIFIQUES (Google Cloud, Twitch, etc.) ===
        const servicePatterns = [
            { pattern: 'google cloud', weight: 100, type: 'cloud_service' },
            { pattern: 'twitch', weight: 100, type: 'streaming_service' },
            { pattern: 'youtube', weight: 80, type: 'video_service' },
            { pattern: 'netflix', weight: 80, type: 'streaming_service' },
            { pattern: 'spotify', weight: 80, type: 'music_service' },
            { pattern: 'amazon', weight: 90, type: 'ecommerce_service' },
            { pattern: 'microsoft', weight: 90, type: 'tech_service' },
            { pattern: 'apple', weight: 90, type: 'tech_service' }
        ];
        
        servicePatterns.forEach(service => {
            if (content.text.includes(service.pattern.toLowerCase()) || 
                subject.includes(service.pattern.toLowerCase()) ||
                senderAddress.includes(service.pattern.toLowerCase()) ||
                senderName.includes(service.pattern.toLowerCase())) {
                
                totalScore += service.weight;
                matches.push({ 
                    keyword: service.pattern + '_service', 
                    type: service.type, 
                    score: service.weight 
                });
                
                if (service.weight >= 100) {
                    hasUltraStrong = true;
                }
            }
        });
        
        // === M√âTHODE 10: ENCODAGE ET CARACT√àRES SP√âCIAUX ===
        const encodingPatterns = [
            's√É¬©curit√É¬©', 'notificat√É¬©', 'pr√É¬©f√É¬©rences',
            'd√É¬©sabonner', 'r√É¬©ception', '√É¬©quipe',
            'confidentialit√É¬©', 'd√É¬©claration'
        ];
        
        encodingPatterns.forEach(pattern => {
            if (content.text.includes(pattern.toLowerCase())) {
                totalScore += 60;
                matches.push({ keyword: 'encoding_issue', type: 'encoding', score: 60 });
            }
        });
        
        // === D√âCISION FINALE ===
        // Seuils TR√àS PERMISSIFS pour newsletter
        const isNewsletter = hasUltraStrong || totalScore >= 100; // Seuil r√©duit de 120 √† 100
        
        if (isNewsletter) {
            const confidence = hasUltraStrong ? 0.98 : 
                              totalScore >= 200 ? 0.95 : 
                              totalScore >= 150 ? 0.90 : 
                              totalScore >= 100 ? 0.85 : 0.80;
            
            return {
                category: 'marketing_news',
                score: Math.min(totalScore, 300), // Cap √† 300
                confidence: confidence,
                matchedPatterns: matches,
                hasAbsolute: hasUltraStrong,
                priorityDetection: 'ultra_enhanced_newsletter',
                detectionMethod: 'ultra_multi_method',
                detectionDetails: {
                    totalScore,
                    hasUltraStrong,
                    matchesCount: matches.length,
                    senderDomain: domain,
                    recipientsCount: totalRecipients
                }
            };
        }
        
        return null;
    }

    // ================================================
    // EXTRACTION CONTENU AM√âLIOR√âE
    // ================================================
    extractCompleteContentEnhanced(email) {
        let allText = '';
        let subject = '';
        
        // === TRAITEMENT DU SUJET ===
        if (email.subject && email.subject.trim()) {
            subject = email.subject;
            // R√©p√©ter le sujet pour lui donner plus de poids dans l'analyse
            allText += (email.subject + ' ').repeat(25); // Augment√© √† 25
        } else {
            subject = '[SANS_SUJET]';
            allText += 'sans sujet email sans objet message vide ';
        }
        
        // === TRAITEMENT DE L'EXP√âDITEUR ===
        if (email.from?.emailAddress?.address) {
            const senderAddress = email.from.emailAddress.address;
            allText += (senderAddress + ' ').repeat(15); // Poids important √† l'adresse
            
            // Extraire et r√©p√©ter le domaine
            const domain = this.extractDomain(senderAddress);
            allText += (domain + ' ').repeat(10);
        }
        
        if (email.from?.emailAddress?.name) {
            const senderName = email.from.emailAddress.name;
            allText += (senderName + ' ').repeat(15); // Poids important au nom
        }
        
        // === TRAITEMENT DES DESTINATAIRES ===
        if (email.toRecipients && Array.isArray(email.toRecipients)) {
            email.toRecipients.forEach(recipient => {
                if (recipient.emailAddress?.address) {
                    allText += recipient.emailAddress.address + ' ';
                }
                if (recipient.emailAddress?.name) {
                    allText += recipient.emailAddress.name + ' ';
                }
            });
        }
        
        if (email.ccRecipients && Array.isArray(email.ccRecipients)) {
            email.ccRecipients.forEach(recipient => {
                if (recipient.emailAddress?.address) {
                    allText += recipient.emailAddress.address + ' ';
                }
                if (recipient.emailAddress?.name) {
                    allText += recipient.emailAddress.name + ' ';
                }
            });
        }
        
        // === TRAITEMENT DU PREVIEW/R√âSUM√â ===
        if (email.bodyPreview) {
            // Nettoyer et r√©p√©ter le preview
            const cleanPreview = this.cleanAndNormalizeText(email.bodyPreview);
            allText += (cleanPreview + ' ').repeat(8); // Augment√© √† 8
        }
        
        // === TRAITEMENT DU CORPS DU MESSAGE ===
        if (email.body?.content) {
            let bodyContent = email.body.content;
            
            // Nettoyer le HTML si pr√©sent
            if (bodyContent.includes('<')) {
                bodyContent = this.cleanHtmlEnhanced(bodyContent);
            }
            
            // Normaliser et ajouter
            const cleanBody = this.cleanAndNormalizeText(bodyContent);
            allText += cleanBody + ' ';
        }
        
        // === TRAITEMENT DES M√âTADONN√âES ===
        // Ajouter les cat√©gories existantes si pr√©sentes
        if (email.categories && Array.isArray(email.categories)) {
            email.categories.forEach(cat => {
                allText += cat + ' ';
            });
        }
        
        // Ajouter l'importance
        if (email.importance) {
            allText += email.importance + ' ';
        }
        
        // Ajouter des indicateurs de pi√®ces jointes
        if (email.hasAttachments) {
            allText += 'attachment pi√®ce jointe fichier joint ';
        }
        
        return {
            text: allText.toLowerCase().trim(),
            subject: subject.toLowerCase(),
            rawSubject: email.subject || '',
            domain: this.extractDomain(email.from?.emailAddress?.address),
            hasHtml: !!(email.body?.content && email.body.content.includes('<')),
            length: allText.length,
            hasNoSubject: !email.subject || !email.subject.trim(),
            senderAddress: email.from?.emailAddress?.address?.toLowerCase() || '',
            senderName: email.from?.emailAddress?.name?.toLowerCase() || '',
            recipientsCount: (email.toRecipients?.length || 0) + (email.ccRecipients?.length || 0),
            hasAttachments: email.hasAttachments || false,
            bodyPreview: email.bodyPreview || ''
        };
    }

    // ================================================
    // NETTOYAGE HTML AM√âLIOR√â
    // ================================================
    cleanHtmlEnhanced(html) {
        if (!html) return '';
        
        // Pr√©server certains √©l√©ments importants pour la d√©tection
        let cleaned = html;
        
        // Extraire les liens (importantes pour newsletters)
        const links = [];
        cleaned = cleaned.replace(/<a[^>]*href=["']([^"']*)["'][^>]*>(.*?)<\/a>/gi, (match, href, text) => {
            links.push(href);
            return ` ${text} ${href} `;
        });
        
        // Extraire les images alt text
        cleaned = cleaned.replace(/<img[^>]*alt=["']([^"']*)["'][^>]*>/gi, (match, alt) => {
            return ` ${alt} `;
        });
        
        // Extraire le title des liens
        cleaned = cleaned.replace(/title=["']([^"']*)["']/gi, (match, title) => {
            return ` ${title} `;
        });
        
        // Supprimer les balises HTML mais garder le contenu
        cleaned = cleaned
            .replace(/<style[^>]*>.*?<\/style>/gis, ' ') // Supprimer CSS
            .replace(/<script[^>]*>.*?<\/script>/gis, ' ') // Supprimer JS
            .replace(/<[^>]+>/g, ' ') // Supprimer toutes les balises
            .replace(/&[^;]+;/g, ' ') // Supprimer entit√©s HTML
            .replace(/\s+/g, ' ') // Normaliser les espaces
            .trim();
        
        // Ajouter les liens extraits
        if (links.length > 0) {
            cleaned += ' ' + links.join(' ');
        }
        
        return cleaned;
    }

    // ================================================
    // NETTOYAGE ET NORMALISATION DU TEXTE
    // ================================================
    cleanAndNormalizeText(text) {
        if (!text) return '';
        
        return text
            // G√©rer l'encodage d√©fectueux
            .replace(/√É¬©/g, '√©')
            .replace(/√É¬®/g, '√®')
            .replace(/√É /g, '√†')
            .replace(/√É¬¥/g, '√¥')
            .replace(/√É¬ß/g, '√ß')
            .replace(/√É¬π/g, '√π')
            .replace(/√É¬¢/g, '√¢')
            .replace(/√É¬™/g, '√™')
            .replace(/√É¬Æ/g, '√Æ')
            .replace(/√É¬Ø/g, '√Ø')
            .replace(/√É¬´/g, '√´')
            .replace(/√É¬º/g, '√º')
            .replace(/√É¬∂/g, '√∂')
            .replace(/√É¬§/g, '√§')
            // Normaliser les caract√®res sp√©ciaux
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            // Nettoyer les espaces et caract√®res sp√©ciaux
            .replace(/['']/g, "'")
            .replace(/[-_]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    // ================================================
    // ANALYSE CAT√âGORIE AVEC SCORING AM√âLIOR√â
    // ================================================
    calculateScore(content, keywords, categoryId) {
        let totalScore = 0;
        let hasAbsolute = false;
        const matches = [];
        const text = content.text;
        
        // === P√âNALIT√â MARKETING R√âDUITE ===
        // R√©duire la p√©nalit√© pour permettre plus de d√©tection newsletter
        if (categoryId !== 'marketing_news') {
            const marketingKeywords = [
                'newsletter', 'unsubscribe', 'promotion', 'marketing',
                'shop', 'buy', 'purchase', 'sale', 'deal', 'offer'
            ];
            
            let marketingContent = 0;
            marketingKeywords.forEach(keyword => {
                if (this.findInTextEnhanced(text, keyword)) {
                    marketingContent += 10; // R√©duit de 15 √† 10
                }
            });
            
            // Seuil r√©duit et p√©nalit√© r√©duite
            if (marketingContent >= 20) { // R√©duit de 30 √† 20
                const penalty = Math.min(marketingContent, 30); // Cap √† 30
                totalScore -= penalty;
                matches.push({ 
                    keyword: 'marketing_content_penalty', 
                    type: 'penalty', 
                    score: -penalty 
                });
            }
        }
        
        // === BONUS DE CAT√âGORIE ===
        const categoryBonus = {
            'marketing_news': 50, // BONUS SP√âCIAL pour newsletter
            'security': 20,
            'finance': 20,
            'tasks': 20,
            'meetings': 15,
            'support': 15,
            'hr': 15,
            'commercial': 15,
            'project': 10,
            'notifications': 5, // Tr√®s r√©duit
            'cc': 5
        };
        
        if (categoryBonus[categoryId]) {
            totalScore += categoryBonus[categoryId];
            matches.push({ 
                keyword: 'category_bonus', 
                type: 'bonus', 
                score: categoryBonus[categoryId] 
            });
        }
        
        // === TEST DES EXCLUSIONS ===
        if (keywords.exclusions && keywords.exclusions.length > 0) {
            for (const exclusion of keywords.exclusions) {
                if (this.findInTextEnhanced(text, exclusion)) {
                    const penalty = categoryId === 'marketing_news' ? 20 : 50; // P√©nalit√© r√©duite pour newsletter
                    totalScore -= penalty;
                    matches.push({ 
                        keyword: exclusion, 
                        type: 'exclusion', 
                        score: -penalty 
                    });
                }
            }
        }
        
        // === TEST DES MOTS-CL√âS ABSOLUS ===
        if (keywords.absolute && keywords.absolute.length > 0) {
            for (const keyword of keywords.absolute) {
                if (this.findInTextEnhanced(text, keyword)) {
                    const baseScore = categoryId === 'marketing_news' ? 120 : 100; // Bonus pour newsletter
                    totalScore += baseScore;
                    hasAbsolute = true;
                    matches.push({ keyword, type: 'absolute', score: baseScore });
                    
                    // Bonus suppl√©mentaire si dans le sujet (RENFORC√â)
                    if (content.subject && this.findInTextEnhanced(content.subject, keyword)) {
                        const subjectBonus = categoryId === 'marketing_news' ? 80 : 50; // Bonus renforc√© pour newsletter
                        totalScore += subjectBonus;
                        matches.push({ 
                            keyword: keyword + ' (in subject)', 
                            type: 'subject_bonus', 
                            score: subjectBonus 
                        });
                    }
                    
                    // Bonus si dans l'adresse email
                    if (content.senderAddress && this.findInTextEnhanced(content.senderAddress, keyword)) {
                        const senderBonus = categoryId === 'marketing_news' ? 60 : 30;
                        totalScore += senderBonus;
                        matches.push({ 
                            keyword: keyword + ' (in sender)', 
                            type: 'sender_bonus', 
                            score: senderBonus 
                        });
                    }
                }
            }
        }
        
        // === TEST DES MOTS-CL√âS FORTS ===
        if (keywords.strong && keywords.strong.length > 0) {
            let strongMatches = 0;
            for (const keyword of keywords.strong) {
                if (this.findInTextEnhanced(text, keyword)) {
                    const baseScore = categoryId === 'marketing_news' ? 50 : 40; // Bonus pour newsletter
                    totalScore += baseScore;
                    strongMatches++;
                    matches.push({ keyword, type: 'strong', score: baseScore });
                    
                    if (content.subject && this.findInTextEnhanced(content.subject, keyword)) {
                        const subjectBonus = categoryId === 'marketing_news' ? 30 : 20;
                        totalScore += subjectBonus;
                        matches.push({ 
                            keyword: keyword + ' (in subject)', 
                            type: 'subject_bonus', 
                            score: subjectBonus 
                        });
                    }
                }
            }
            
            // Bonus pour multiples mots-cl√©s forts
            if (strongMatches >= 2) {
                const multiBonus = categoryId === 'marketing_news' ? 50 : 30;
                totalScore += multiBonus;
                matches.push({ 
                    keyword: 'multiple_strong_matches', 
                    type: 'multi_bonus', 
                    score: multiBonus 
                });
            }
        }
        
        // === TEST DES MOTS-CL√âS FAIBLES ===
        if (keywords.weak && keywords.weak.length > 0) {
            let weakMatches = 0;
            for (const keyword of keywords.weak) {
                if (this.findInTextEnhanced(text, keyword)) {
                    const baseScore = categoryId === 'marketing_news' ? 20 : 15; // Bonus pour newsletter
                    totalScore += baseScore;
                    weakMatches++;
                    matches.push({ keyword, type: 'weak', score: baseScore });
                }
            }
            
            if (weakMatches >= 3) {
                const multiBonus = categoryId === 'marketing_news' ? 30 : 20;
                totalScore += multiBonus;
                matches.push({ 
                    keyword: 'multiple_weak_matches', 
                    type: 'multi_bonus', 
                    score: multiBonus 
                });
            }
        }
        
        return { 
            total: Math.max(0, totalScore), 
            hasAbsolute, 
            matches 
        };
    }

    // ================================================
    // RECHERCHE DANS LE TEXTE AM√âLIOR√âE
    // ================================================
    findInTextEnhanced(text, keyword) {
        if (!text || !keyword) return false;
        
        // Normalisation avanc√©e du texte
        const normalizedText = this.cleanAndNormalizeText(text.toLowerCase());
        const normalizedKeyword = this.cleanAndNormalizeText(keyword.toLowerCase());
        
        // Recherche exacte d'abord
        if (normalizedText.includes(normalizedKeyword)) {
            return true;
        }
        
        // Recherche avec fronti√®res de mots
        try {
            const wordBoundaryRegex = new RegExp(`\\b${this.escapeRegex(normalizedKeyword)}\\b`, 'i');
            if (wordBoundaryRegex.test(normalizedText)) {
                return true;
            }
        } catch (e) {
            // Fallback si regex √©choue
        }
        
        // Recherche partielle pour certains mots-cl√©s importants
        const partialKeywords = [
            'newsletter', 'unsubscribe', 'd√©sabonner', 'mailing',
            'promotion', 'marketing', 'notification'
        ];
        
        if (partialKeywords.some(pk => normalizedKeyword.includes(pk) || pk.includes(normalizedKeyword))) {
            return normalizedText.includes(normalizedKeyword);
        }
        
        return false;
    }

    // ================================================
    // S√âLECTION PAR PRIORIT√â AVEC SEUILS ULTRA-PERMISSIFS
    // ================================================
    selectByPriorityWithThreshold(results) {
        const MIN_SCORE_THRESHOLD = 15; // Tr√®s r√©duit de 25 √† 15
        const MIN_CONFIDENCE_THRESHOLD = 0.35; // Tr√®s r√©duit de 0.45 √† 0.35
        
        // PRIORIT√â ABSOLUE pour marketing/newsletter
        const marketingResult = results.marketing_news;
        if (marketingResult && marketingResult.score >= 20) { // Seuil tr√®s r√©duit de 30 √† 20
            console.log(`[CategoryManager] ‚úÖ Marketing/Newsletter PRIORITAIRE: ${marketingResult.score}pts`);
            return {
                category: 'marketing_news',
                score: marketingResult.score,
                confidence: marketingResult.confidence,
                matchedPatterns: marketingResult.matches,
                hasAbsolute: marketingResult.hasAbsolute,
                prioritySelection: true
            };
        }
        
        const sortedResults = Object.values(results)
            .filter(r => r.score >= MIN_SCORE_THRESHOLD && r.confidence >= MIN_CONFIDENCE_THRESHOLD)
            .sort((a, b) => {
                // Marketing/Newsletter toujours en premier - ABSOLU
                if (a.category === 'marketing_news' && b.category !== 'marketing_news') return -1;
                if (b.category === 'marketing_news' && a.category !== 'marketing_news') return 1;
                
                if (a.hasAbsolute && !b.hasAbsolute) return -1;
                if (!a.hasAbsolute && b.hasAbsolute) return 1;
                
                if (a.priority !== b.priority) {
                    return b.priority - a.priority;
                }
                
                return b.score - a.score;
            });
        
        const bestResult = sortedResults[0];
        
        if (bestResult) {
            console.log(`[CategoryManager] ‚úÖ Cat√©gorie s√©lectionn√©e: ${bestResult.category} (${bestResult.score}pts, ${Math.round(bestResult.confidence * 100)}%)`);
            return {
                category: bestResult.category,
                score: bestResult.score,
                confidence: bestResult.confidence,
                matchedPatterns: bestResult.matches,
                hasAbsolute: bestResult.hasAbsolute
            };
        }
        
        // Fallback ultra-permissif
        const allSorted = Object.values(results)
            .filter(r => r.score > 0)
            .sort((a, b) => {
                if (a.category === 'marketing_news') return -1;
                if (b.category === 'marketing_news') return 1;
                return b.score - a.score;
            });
        
        if (allSorted.length > 0 && allSorted[0].score >= 10 && allSorted[0].confidence >= 0.25) { // Seuils ultra-r√©duits
            const fallback = allSorted[0];
            console.log(`[CategoryManager] üìå Utilisation fallback ultra-permissif: ${fallback.category} (${fallback.score}pts, ${Math.round(fallback.confidence * 100)}%)`);
            return {
                category: fallback.category,
                score: fallback.score,
                confidence: fallback.confidence,
                matchedPatterns: fallback.matches,
                hasAbsolute: fallback.hasAbsolute
            };
        }
        
        console.log('[CategoryManager] üìå Aucune cat√©gorie correspondante, classification "other"');
        return {
            category: 'other',
            score: 0,
            confidence: 0,
            matchedPatterns: [],
            hasAbsolute: false,
            reason: 'below_ultra_permissive_threshold'
        };
    }

    // ================================================
    // CONFIDENCE CALCUL√âE AVEC BONUS NEWSLETTER
    // ================================================
    calculateConfidence(score) {
        // Bonus sp√©cial pour newsletter
        if (score.category === 'marketing_news' || score.hasAbsolute) {
            if (score.hasAbsolute) return 0.98;
            if (score.total >= 200) return 0.95;
            if (score.total >= 150) return 0.90;
            if (score.total >= 100) return 0.85;
            if (score.total >= 60) return 0.80; // R√©duit pour newsletter
            if (score.total >= 40) return 0.75; // R√©duit pour newsletter
            if (score.total >= 20) return 0.65; // R√©duit pour newsletter
            return 0.55; // Plancher plus √©lev√© pour newsletter
        }
        
        // Calcul standard pour autres cat√©gories
        if (score.hasAbsolute) return 0.95;
        if (score.total >= 200) return 0.90;
        if (score.total >= 150) return 0.85;
        if (score.total >= 100) return 0.80;
        if (score.total >= 80) return 0.75;
        if (score.total >= 60) return 0.70;
        if (score.total >= 40) return 0.60;
        if (score.total >= 30) return 0.55;
        return 0.40;
    }

    // ================================================
    // INITIALISATION DES CAT√âGORIES AVEC PRIORIT√âS AJUST√âES
    // ================================================
    initializeCategories() {
        this.categories = {
            // PRIORIT√â MAXIMALE ABSOLUE - MARKETING & NEWS
            marketing_news: {
                name: 'Marketing & News',
                icon: 'üì∞',
                color: '#8b5cf6',
                description: 'Newsletters, promotions et marketing',
                priority: 1000, // PRIORIT√â MAXIMALE ABSOLUE RENFORC√âE
                isCustom: false
            },
            
            // PRIORIT√â √âLEV√âE - SYST√àMES
            security: {
                name: 'S√©curit√©',
                icon: 'üîí',
                color: '#991b1b',
                description: 'Alertes de s√©curit√© et authentification',
                priority: 90,
                isCustom: false
            },
            
            finance: {
                name: 'Finance',
                icon: 'üí∞',
                color: '#dc2626',
                description: 'Factures et paiements',
                priority: 85,
                isCustom: false
            },
            
            tasks: {
                name: 'Actions Requises',
                icon: '‚úÖ',
                color: '#ef4444',
                description: 'T√¢ches √† faire et demandes d\'action',
                priority: 80,
                isCustom: false
            },
            
            // PRIORIT√â NORMALE
            meetings: {
                name: 'R√©unions',
                icon: 'üìÖ',
                color: '#f59e0b',
                description: 'Invitations et demandes de r√©union',
                priority: 70,
                isCustom: false
            },
            
            commercial: {
                name: 'Commercial',
                icon: 'üíº',
                color: '#059669',
                description: 'Opportunit√©s, devis et contrats',
                priority: 65,
                isCustom: false
            },
            
            support: {
                name: 'Support',
                icon: 'üõ†Ô∏è',
                color: '#f59e0b',
                description: 'Tickets et assistance',
                priority: 60,
                isCustom: false
            },
            
            hr: {
                name: 'RH',
                icon: 'üë•',
                color: '#10b981',
                description: 'Ressources humaines',
                priority: 55,
                isCustom: false
            },
            
            // PRIORIT√â FAIBLE
            reminders: {
                name: 'Relances',
                icon: 'üîÑ',
                color: '#10b981',
                description: 'Rappels et suivis',
                priority: 50,
                isCustom: false
            },
            
            project: {
                name: 'Projets',
                icon: 'üìä',
                color: '#3b82f6',
                description: 'Gestion de projet',
                priority: 45,
                isCustom: false
            },
            
            internal: {
                name: 'Communication Interne',
                icon: 'üì¢',
                color: '#0ea5e9',
                description: 'Annonces internes',
                priority: 40,
                isCustom: false
            },
            
            cc: {
                name: 'En Copie',
                icon: 'üìã',
                color: '#64748b',
                description: 'Emails o√π vous √™tes en copie',
                priority: 30,
                isCustom: false
            },
            
            notifications: {
                name: 'Notifications',
                icon: 'üîî',
                color: '#94a3b8',
                description: 'Notifications automatiques syst√®me',
                priority: 15, // PRIORIT√â TR√àS R√âDUITE pour √©viter conflit newsletter
                isCustom: false
            }
        };
        
        console.log('[CategoryManager] üìö Cat√©gories initialis√©es avec PRIORIT√â ABSOLUE pour Marketing/Newsletter');
    }

    // ================================================
    // GESTION DES PROVIDERS ET SCAN (Conserv√© des versions pr√©c√©dentes)
    // ================================================
    
    detectEmailProvider() {
        console.log('[CategoryManager] üîç D√©tection provider email...');
        
        // PRIORIT√â 1: Gmail via GoogleAuthService
        if (window.googleAuthService && 
            typeof window.googleAuthService.isAuthenticated === 'function' && 
            window.googleAuthService.isAuthenticated()) {
            console.log('[CategoryManager] ‚úÖ Gmail d√©tect√© et authentifi√©');
            return {
                type: 'gmail',
                service: window.googleAuthService,
                ...this.scanProviders.gmail
            };
        }
        
        // PRIORIT√â 2: Outlook via AuthService
        if (window.authService && 
            typeof window.authService.isAuthenticated === 'function' && 
            window.authService.isAuthenticated()) {
            console.log('[CategoryManager] ‚úÖ Outlook d√©tect√© et authentifi√©');
            return {
                type: 'outlook',
                service: window.authService,
                ...this.scanProviders.outlook
            };
        }
        
        console.log('[CategoryManager] ‚ö†Ô∏è Aucun provider email authentifi√©');
        return null;
    }

    checkEmailRetrievalMethods() {
        const provider = this.detectEmailProvider();
        if (!provider) {
            return {
                available: false,
                provider: null,
                methods: [],
                error: 'Aucun provider authentifi√©'
            };
        }

        const availableMethods = [];
        
        // V√©rifier MailService unifi√©
        if (window.mailService && typeof window.mailService.getEmailsFromFolder === 'function') {
            availableMethods.push('mailService');
        }
        
        if (provider.type === 'gmail') {
            if (window.googleAuthService && typeof window.googleAuthService.getAccessToken === 'function') {
                availableMethods.push('directGmail');
            }
            if (window.gmailService && typeof window.gmailService.getEmails === 'function') {
                availableMethods.push('gmailService');
            }
        } else if (provider.type === 'outlook') {
            if (window.authService && typeof window.authService.getAccessToken === 'function') {
                availableMethods.push('directOutlook');
            }
            if (window.outlookService && typeof window.outlookService.getEmails === 'function') {
                availableMethods.push('outlookService');
            }
        }

        return {
            available: availableMethods.length > 0,
            provider: provider,
            methods: availableMethods,
            error: availableMethods.length === 0 ? 'Aucune m√©thode de r√©cup√©ration disponible' : null
        };
    }

    recordScanResult(scanResult) {
        const record = {
            timestamp: Date.now(),
            provider: scanResult.provider || 'unknown',
            totalEmails: scanResult.total || 0,
            categorizedEmails: scanResult.categorized || 0,
            preselectedForTasks: scanResult.stats?.preselectedForTasks || 0,
            marketingDetected: scanResult.stats?.marketingDetected || 0,
            scanDuration: scanResult.stats?.scanDuration || 0,
            breakdown: scanResult.breakdown || {},
            taskPreselectedCategories: scanResult.taskPreselectedCategories || []
        };

        this.scanHistory.push(record);
        this.lastScanResults = record;

        // Garder seulement les 10 derniers scans
        if (this.scanHistory.length > 10) {
            this.scanHistory = this.scanHistory.slice(-10);
        }

        console.log('[CategoryManager] üìä Scan enregistr√©:', record);
        this.notifyChange('scanCompleted', record);
    }

    getScanHistory() {
        return [...this.scanHistory];
    }

    getLastScanResults() {
        return this.lastScanResults;
    }

    // ================================================
    // M√âTHODES UTILITAIRES ET SUPPORTS (Conserv√©es des versions pr√©c√©dentes)
    // ================================================
    
    analyzeAllCategoriesExceptMarketing(content) {
        const results = {};
        const activeCategories = this.getActiveCategories();
        const customCategoryIds = Object.keys(this.customCategories);
        
        // Analyser toutes les cat√©gories SAUF marketing_news
        const allCategoriesToAnalyze = new Set([
            ...Object.keys(this.keywordCatalog).filter(cat => cat !== 'marketing_news'),
            ...customCategoryIds
        ]);
        
        for (const categoryId of allCategoriesToAnalyze) {
            const isActive = activeCategories.includes(categoryId);
            const isCustom = customCategoryIds.includes(categoryId);
            const isSpecial = ['cc'].includes(categoryId);
            
            if (!isActive && !isCustom && !isSpecial) {
                continue;
            }
            
            if (!this.categories[categoryId] && !this.customCategories[categoryId]) {
                continue;
            }
            
            let keywords = this.keywordCatalog[categoryId];
            
            if (isCustom && (!keywords || this.isEmptyKeywords(keywords))) {
                const customCat = this.customCategories[categoryId];
                if (customCat && customCat.keywords) {
                    keywords = customCat.keywords;
                }
            }
            
            if (!keywords || this.isEmptyKeywords(keywords)) {
                continue;
            }
            
            const score = this.calculateScore(content, keywords, categoryId);
            
            results[categoryId] = {
                category: categoryId,
                score: score.total,
                hasAbsolute: score.hasAbsolute,
                matches: score.matches,
                confidence: this.calculateConfidence(score),
                priority: (this.categories[categoryId] || this.customCategories[categoryId])?.priority || 50,
                isCustom: isCustom
            };
        }
        
        return results;
    }

    analyzeCategory(content, keywords) {
        return this.calculateScore(content, keywords, 'single');
    }

    isEmptyKeywords(keywords) {
        return !keywords || (
            (!keywords.absolute || keywords.absolute.length === 0) &&
            (!keywords.strong || keywords.strong.length === 0) &&
            (!keywords.weak || keywords.weak.length === 0)
        );
    }

    isMainRecipient(email) {
        if (!email.toRecipients || !Array.isArray(email.toRecipients)) {
            return false;
        }
        
        const currentUserEmail = this.getCurrentUserEmail();
        if (!currentUserEmail) {
            return email.toRecipients.length > 0;
        }
        
        return email.toRecipients.some(recipient => {
            const recipientEmail = recipient.emailAddress?.address?.toLowerCase();
            return recipientEmail === currentUserEmail.toLowerCase();
        });
    }

    isInCC(email) {
        if (!email.ccRecipients || !Array.isArray(email.ccRecipients) || email.ccRecipients.length === 0) {
            return false;
        }
        
        const currentUserEmail = this.getCurrentUserEmail();
        
        if (!currentUserEmail) {
            return false;
        }
        
        const isInToList = email.toRecipients?.some(recipient => {
            const recipientEmail = recipient.emailAddress?.address?.toLowerCase();
            return recipientEmail === currentUserEmail.toLowerCase();
        }) || false;
        
        const isInCCList = email.ccRecipients.some(recipient => {
            const recipientEmail = recipient.emailAddress?.address?.toLowerCase();
            return recipientEmail === currentUserEmail.toLowerCase();
        });
        
        return isInCCList && !isInToList;
    }

    getCurrentUserEmail() {
        try {
            const userInfo = localStorage.getItem('currentUserInfo');
            if (userInfo) {
                const parsed = JSON.parse(userInfo);
                return parsed.email || parsed.userPrincipalName || parsed.mail;
            }
            
            const msalAccounts = JSON.parse(localStorage.getItem('msal.account.keys') || '[]');
            if (msalAccounts.length > 0) {
                const firstAccount = localStorage.getItem(msalAccounts[0]);
                if (firstAccount) {
                    const account = JSON.parse(firstAccount);
                    return account.username || account.preferred_username;
                }
            }
            
            if (window.authService && typeof window.authService.getCurrentUser === 'function') {
                const user = window.authService.getCurrentUser();
                if (user) {
                    return user.email || user.userPrincipalName || user.username;
                }
            }
            
        } catch (e) {
            console.warn('[CategoryManager] Impossible de r√©cup√©rer l\'email utilisateur:', e);
        }
        return null;
    }

    isSpamEmail(email) {
        if (email.parentFolderId) {
            const folderInfo = email.parentFolderId.toLowerCase();
            if (folderInfo.includes('junk') || 
                folderInfo.includes('spam') || 
                folderInfo.includes('unwanted') ||
                folderInfo.includes('ind√©sirable')) {
                return true;
            }
        }
        
        if (email.categories && Array.isArray(email.categories)) {
            const hasSpamCategory = email.categories.some(cat => 
                cat.toLowerCase().includes('spam') ||
                cat.toLowerCase().includes('junk') ||
                cat.toLowerCase().includes('ind√©sirable')
            );
            if (hasSpamCategory) return true;
        }
        
        return false;
    }

    isGloballyExcluded(content, email) {
        const exclusions = this.settings.categoryExclusions;
        if (!exclusions) return false;
        
        if (exclusions.domains && exclusions.domains.length > 0) {
            for (const domain of exclusions.domains) {
                if (content.domain.includes(domain.toLowerCase())) {
                    return true;
                }
            }
        }
        
        if (exclusions.emails && exclusions.emails.length > 0) {
            const emailAddress = email.from?.emailAddress?.address?.toLowerCase();
            if (emailAddress && exclusions.emails.includes(emailAddress)) {
                return true;
            }
        }
        
        return false;
    }

    cleanHtml(html) {
        if (!html) return '';
        return html
            .replace(/<a[^>]*>(.*?)<\/a>/gi, ' $1 ')
            .replace(/<[^>]+>/g, ' ')
            .replace(/&[^;]+;/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    extractDomain(email) {
        if (!email || !email.includes('@')) return 'unknown';
        return email.split('@')[1]?.toLowerCase() || 'unknown';
    }

    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\        // Calcul standard pour autres cat√©gories
        if (score.hasAbsolute) return 0.95;
        if (score.total >= 200) return 0.90;
        if (score.total >= 150) return 0.');
    }

    shouldExcludeSpam() {
        return this.settings.preferences?.excludeSpam !== false;
    }

    shouldDetectCC() {
        return this.settings.preferences?.detectCC !== false;
    }

    // ================================================
    // GESTION PARAM√àTRES (Conserv√©e des versions pr√©c√©dentes)
    // ================================================
    
    loadSettings() {
        try {
            const saved = localStorage.getItem('categorySettings');
            const defaultSettings = this.getDefaultSettings();
            
            if (saved) {
                const parsedSettings = JSON.parse(saved);
                const mergedSettings = { ...defaultSettings, ...parsedSettings };
                console.log('[CategoryManager] ‚úÖ Settings charg√©s depuis localStorage');
                return mergedSettings;
            } else {
                console.log('[CategoryManager] üìù Utilisation settings par d√©faut');
                return defaultSettings;
            }
        } catch (error) {
            console.error('[CategoryManager] ‚ùå Erreur chargement param√®tres:', error);
            return this.getDefaultSettings();
        }
    }

    getDefaultSettings() {
        return {
            activeCategories: null,
            excludedDomains: [],
            excludedKeywords: [],
            taskPreselectedCategories: ['tasks', 'meetings', 'finance'],
            categoryExclusions: {
                domains: [],
                emails: []
            },
            scanSettings: {
                defaultPeriod: 7,
                defaultFolder: 'inbox',
                autoAnalyze: true,
                autoCategrize: true
            },
            automationSettings: {
                autoCreateTasks: false,
                groupTasksByDomain: false,
                skipDuplicates: true,
                autoAssignPriority: false
            },
            preferences: {
                darkMode: false,
                compactView: false,
                showNotifications: true,
                excludeSpam: true,
                detectCC: true
            }
        };
    }

    saveSettings() {
        try {
            localStorage.setItem('categorySettings', JSON.stringify(this.settings));
            console.log('[CategoryManager] üíæ Settings sauvegard√©s');
        } catch (error) {
            console.error('[CategoryManager] ‚ùå Erreur sauvegarde param√®tres:', error);
        }
    }

    // ================================================
    // API PUBLIQUE (Conserv√©e des versions pr√©c√©dentes)
    // ================================================
    
    getSettings() {
        return JSON.parse(JSON.stringify(this.settings));
    }

    getTaskPreselectedCategories() {
        return [...(this.settings.taskPreselectedCategories || [])];
    }

    updateTaskPreselectedCategories(categories) {
        console.log('[CategoryManager] üìã updateTaskPreselectedCategories:', categories);
        
        const normalizedCategories = Array.isArray(categories) ? [...categories] : [];
        this.settings.taskPreselectedCategories = normalizedCategories;
        this.saveSettings();
        
        this.notifyChange('taskPreselectedCategories', normalizedCategories);
        
        return normalizedCategories;
    }

    getActiveCategories() {
        if (!this.settings.activeCategories) {
            const allCategories = [...Object.keys(this.categories), ...Object.keys(this.customCategories)];
            return allCategories;
        }
        
        return [...this.settings.activeCategories];
    }

    getCategories() {
        return { ...this.categories, ...this.customCategories };
    }

    getCategory(categoryId) {
        if (categoryId === 'all') {
            return { id: 'all', name: 'Tous', icon: 'üìß', color: '#1e293b' };
        }
        if (categoryId === 'other') {
            return { id: 'other', name: 'Non class√©', icon: '‚ùì', color: '#64748b' };
        }
        if (categoryId === 'spam') {
            return { id: 'spam', name: 'Spam', icon: 'üö´', color: '#dc2626' };
        }
        if (categoryId === 'excluded') {
            return { id: 'excluded', name: 'Exclu', icon: 'üö´', color: '#6b7280' };
        }
        return this.categories[categoryId] || this.customCategories[categoryId] || null;
    }

    // ================================================
    // CAT√âGORIES PERSONNALIS√âES ET √âV√âNEMENTS (Conserv√© des versions pr√©c√©dentes)
    // ================================================
    
    loadCustomCategories() {
        try {
            const saved = localStorage.getItem('customCategories');
            this.customCategories = saved ? JSON.parse(saved) : {};
            
            console.log('[CategoryManager] üìÅ Chargement cat√©gories personnalis√©es...');
            
            Object.entries(this.customCategories).forEach(([id, category]) => {
                this.categories[id] = {
                    ...category,
                    isCustom: true,
                    priority: category.priority || 30
                };
                
                if (category.keywords) {
                    this.keywordCatalog[id] = {
                        absolute: [...(category.keywords.absolute || [])],
                        strong: [...(category.keywords.strong || [])],
                        weak: [...(category.keywords.weak || [])],
                        exclusions: [...(category.keywords.exclusions || [])]
                    };
                } else {
                    this.keywordCatalog[id] = {
                        absolute: [],
                        strong: [],
                        weak: [],
                        exclusions: []
                    };
                }
                
                const totalKeywords = this.getTotalKeywordsCount(id);
                console.log(`[CategoryManager] ‚úÖ Cat√©gorie personnalis√©e "${category.name}" (${id}): ${totalKeywords} mots-cl√©s`);
            });
            
            console.log('[CategoryManager] üìä R√©sum√©:', Object.keys(this.customCategories).length, 'cat√©gories personnalis√©es charg√©es');
            
        } catch (error) {
            console.error('[CategoryManager] ‚ùå Erreur chargement cat√©gories personnalis√©es:', error);
            this.customCategories = {};
        }
    }

    getTotalKeywordsCount(categoryId) {
        const keywords = this.keywordCatalog[categoryId];
        if (!keywords) return 0;
        
        return (keywords.absolute?.length || 0) + 
               (keywords.strong?.length || 0) + 
               (keywords.weak?.length || 0) + 
               (keywords.exclusions?.length || 0);
    }

    setupEventListeners() {
        window.addEventListener('storage', (e) => {
            if (e.key === 'categorySettings') {
                console.log('[CategoryManager] üîÑ Changement localStorage d√©tect√©');
                this.reloadSettingsFromStorage();
            }
        });
    }

    reloadSettingsFromStorage() {
        const oldSettings = { ...this.settings };
        this.settings = this.loadSettings();
        
        const changes = this.detectSettingsChanges(oldSettings, this.settings);
        changes.forEach(change => {
            this.notifyChange(change.type, change.value);
        });
    }

    detectSettingsChanges(oldSettings, newSettings) {
        const changes = [];
        
        const criticalFields = [
            'taskPreselectedCategories',
            'activeCategories', 
            'categoryExclusions',
            'scanSettings',
            'automationSettings',
            'preferences'
        ];
        
        criticalFields.forEach(field => {
            const oldValue = JSON.stringify(oldSettings[field] || {});
            const newValue = JSON.stringify(newSettings[field] || {});
            
            if (oldValue !== newValue) {
                changes.push({
                    type: field,
                    value: newSettings[field],
                    oldValue: oldSettings[field]
                });
            }
        });
        
        return changes;
    }

    addChangeListener(callback) {
        this.changeListeners.add(callback);
        console.log(`[CategoryManager] üëÇ Listener ajout√© (${this.changeListeners.size} total)`);
        
        return () => {
            this.changeListeners.delete(callback);
        };
    }

    notifyChange(type, value) {
        console.log(`[CategoryManager] üì¢ Notification changement: ${type}`);
        
        this.changeListeners.forEach(listener => {
            try {
                listener(type, value, this.settings);
            } catch (error) {
                console.error('[CategoryManager] Erreur listener:', error);
            }
        });
        
        setTimeout(() => {
            this.dispatchEvent('categorySettingsChanged', { 
                settings: this.settings,
                type,
                value,
                timestamp: Date.now()
            });
            
            this.dispatchEvent('settingsChanged', { 
                type, 
                value,
                source: 'CategoryManager',
                timestamp: Date.now()
            });
        }, 10);
    }

    dispatchEvent(eventName, detail) {
        try {
            window.dispatchEvent(new CustomEvent(eventName, { 
                detail: {
                    ...detail,
                    source: 'CategoryManager',
                    timestamp: Date.now()
                }
            }));
        } catch (error) {
            console.error(`[CategoryManager] Erreur dispatch ${eventName}:`, error);
        }
    }

    // ================================================
    // M√âTHODES DE TEST (Conserv√©es et am√©lior√©es)
    // ================================================
    
    testEmail(subject, body = '', from = 'test@example.com', expectedCategory = null) {
        const testEmail = {
            subject: subject,
            body: { content: body },
            bodyPreview: body.substring(0, 100),
            from: { emailAddress: { address: from } },
            toRecipients: [{ emailAddress: { address: 'user@example.com' } }],
            receivedDateTime: new Date().toISOString()
        };
        
        const result = this.analyzeEmail(testEmail);
        
        console.log('\n[CategoryManager] TEST RESULT ULTRA-ENHANCED:');
        console.log(`Subject: "${subject}"`);
        console.log(`From: ${from}`);
        console.log(`Category: ${result.category} (expected: ${expectedCategory || 'any'})`);
        console.log(`Score: ${result.score}pts`);
        console.log(`Confidence: ${Math.round(result.confidence * 100)}%`);
        console.log(`Detection Method:`, result.detectionMethod || 'standard');
        console.log(`Matches:`, result.matchedPatterns?.length || 0);
        
        if (expectedCategory && result.category !== expectedCategory) {
            console.log(`‚ùå FAILED - Expected ${expectedCategory}, got ${result.category}`);
        } else {
            console.log('‚úÖ SUCCESS');
        }
        
        return result;
    }

    runDiagnostics() {
        console.group('üè• DIAGNOSTIC CategoryManager v25.0 - Newsletter Detection ULTRA-ENHANCED');
        
        console.group('üìÇ Cat√©gories');
        const allCategories = Object.keys(this.categories);
        const customCategories = Object.keys(this.customCategories);
        const activeCategories = this.getActiveCategories();
        
        console.log('Total cat√©gories:', allCategories.length);
        console.log('Cat√©gories standard:', allCategories.filter(c => !this.categories[c].isCustom).length);
        console.log('Cat√©gories personnalis√©es:', customCategories.length);
        console.log('Cat√©gories actives:', activeCategories.length);
        
        // Afficher la priorit√© de chaque cat√©gorie
        const sortedByPriority = Object.entries(this.categories)
            .sort(([,a], [,b]) => (b.priority || 0) - (a.priority || 0));
        
        console.log('Ordre de priorit√©:');
        sortedByPriority.forEach(([id, cat], index) => {
            console.log(`  ${index + 1}. ${cat.name} (${id}): priorit√© ${cat.priority || 0}`);
        });
        console.groupEnd();
        
        console.group('üîç Catalogue mots-cl√©s ULTRA-RENFORC√â');
        const catalogEntries = Object.keys(this.keywordCatalog);
        console.log('Entr√©es dans le catalogue:', catalogEntries.length);
        
        // Afficher marketing en premier avec d√©tails complets
        if (this.keywordCatalog.marketing_news) {
            const marketingKeywords = this.keywordCatalog.marketing_news;
            const total = (marketingKeywords.absolute?.length || 0) + 
                         (marketingKeywords.strong?.length || 0) + 
                         (marketingKeywords.weak?.length || 0) + 
                         (marketingKeywords.exclusions?.length || 0);
            
            console.log(`üì∞ Marketing & News (ULTRA-RENFORC√â): ${total} mots-cl√©s`);
            console.log(`  - Absolus: ${marketingKeywords.absolute?.length || 0}`);
            console.log(`  - Forts: ${marketingKeywords.strong?.length || 0}`);
            console.log(`  - Faibles: ${marketingKeywords.weak?.length || 0}`);
            console.log(`  - Exclusions: ${marketingKeywords.exclusions?.length || 0}`);
        }
        
        catalogEntries.filter(cat => cat !== 'marketing_news').forEach(catId => {
            const totalKeywords = this.getTotalKeywordsCount(catId);
            if (totalKeywords > 0) {
                const category = this.getCategory(catId);
                console.log(`${category?.icon || 'üìÇ'} ${category?.name || catId}: ${totalKeywords} mots-cl√©s`);
            }
        });
        console.groupEnd();
        
        console.group('üîå Providers Email');
        const emailMethods = this.checkEmailRetrievalMethods();
        const provider = this.detectEmailProvider();
        
        console.log('Provider d√©tect√©:', provider?.type || 'Aucun');
        console.log('M√©thodes disponibles:', emailMethods.methods);
        console.log('Peut scanner:', emailMethods.available);
        if (emailMethods.error) {
            console.log('‚ùå Erreur:', emailMethods.error);
        }
        console.groupEnd();
        
        console.group('üìä Historique des scans');
        console.log('Nombre de scans:', this.scanHistory.length);
        if (this.lastScanResults) {
            console.log('Dernier scan:', {
                provider: this.lastScanResults.provider,
                emails: this.lastScanResults.totalEmails,
                categorized: this.lastScanResults.categorizedEmails,
                marketing: this.lastScanResults.marketingDetected
            });
        }
        console.groupEnd();
        
        console.group('‚öôÔ∏è Configuration ULTRA-ENHANCED');
        console.log('Cat√©gories pr√©-s√©lectionn√©es:', this.getTaskPreselectedCategories());
        console.log('Cat√©gories actives:', this.getActiveCategories().length);
        console.log('Exclude spam:', this.shouldExcludeSpam());
        console.log('Detect CC:', this.shouldDetectCC());
        
        // Afficher les seuils configur√©s
        console.log('Seuils de d√©tection:');
        console.log('  - Score minimum: 15 (ultra-permissif)');
        console.log('  - Confidence minimum: 0.35 (ultra-permissif)');
        console.log('  - Marketing priority score: 20 (tr√®s r√©duit)');
        console.log('  - Fallback score: 10 (ultra-permissif)');
        console.groupEnd();
        
        console.groupEnd();
        
        return {
            totalCategories: allCategories.length,
            customCategories: customCategories.length,
            activeCategories: activeCategories.length,
            catalogEntries: catalogEntries.length,
            preselectedCategories: this.getTaskPreselectedCategories().length,
            marketingPriority: this.categories.marketing_news?.priority || 0,
            newsletterDetectionUltraEnhanced: true,
            emailProvider: provider?.type || null,
            canScan: emailMethods.available,
            scanHistory: this.scanHistory.length,
            hasLastScan: !!this.lastScanResults,
            version: 'v25.0-ULTRA-ENHANCED'
        };
    }

    // ================================================
    // M√âTHODES DE NETTOYAGE ET DESTRUCTION (Conserv√©es)
    // ================================================
    
    cleanup() {
        console.log('[CategoryManager] üßπ Nettoyage...');
        this.changeListeners.clear();
        this.scanHistory = [];
        this.lastScanResults = null;
    }

    destroy() {
        this.cleanup();
        this.categories = {};
        this.keywordCatalog = {};
        this.customCategories = {};
        this.settings = {};
        console.log('[CategoryManager] üí• Instance d√©truite');
    }
}

// ================================================
// INITIALISATION GLOBALE S√âCURIS√âE
// ================================================
if (window.categoryManager) {
    console.log('[CategoryManager] üîÑ Nettoyage ancienne instance...');
    window.categoryManager.destroy?.();
}

console.log('[CategoryManager] üöÄ Cr√©ation nouvelle instance v25.0 ULTRA-ENHANCED...');
window.categoryManager = new CategoryManager();

// ================================================
// FONCTIONS DE TEST GLOBALES AM√âLIOR√âES
// ================================================

window.testCategoryManagerUltraEnhanced = function() {
    console.group('üß™ TEST CategoryManager v25.0 - Newsletter Detection ULTRA-ENHANCED');
    
    const tests = [
        // Tests Newsletter Ultra-Enhanced
        { subject: "Confirmation : votre essai de Google Cloud Platform", from: "CloudPlatform-noreply@google.com", expected: "marketing_news" },
        { subject: "RMCsport is live: RMC SPORT CLUB EP35 ! MERCATO", from: "no-reply@twitch.tv", expected: "marketing_news" },
        { subject: "Newsletter hebdomadaire - D√©sabonnez-vous ici", from: "news@example.com", expected: "marketing_news" },
        { subject: "Twitch Notification - Someone you follow is live", from: "no-reply@twitch.tv", expected: "marketing_news" },
        { subject: "Utilisez le code de s√É¬©curit√É¬© suivant pour le compte Microsoft", from: "account-security@microsoft.com", expected: "marketing_news" },
        { subject: "Votre commande Amazon a √©t√© exp√©di√©e", from: "ship-confirm@amazon.com", expected: "marketing_news" },
        { subject: "Spotify Wrapped 2024 - D√©couvrez vos statistiques", from: "no-reply@spotify.com", expected: "marketing_news" },
        
        // Tests autres cat√©gories
        { subject: "Action requise: Confirmer votre commande urgente", from: "noreply@shop.com", expected: "tasks" },
        { subject: "Nouvelle connexion d√©tect√©e sur votre compte", from: "security@bank.com", expected: "security" },
        { subject: "Facture #12345 - √âch√©ance dans 3 jours", from: "billing@company.com", expected: "finance" },
        { subject: "R√©union √©quipe pr√©vue pour demain", from: "team@company.com", expected: "meetings" }
    ];
    
    console.log('=== TESTS DE D√âTECTION NEWSLETTER ULTRA-ENHANCED ===');
    
    tests.forEach(test => {
        window.categoryManager.testEmail(test.subject, '', test.from, test.expected);
    });
    
    console.log('\n=== DIAGNOSTIC COMPLET ===');
    const diagnostic = window.categoryManager.runDiagnostics();
    console.log('R√©sultat diagnostic:', diagnostic);
    
    // Test des m√©thodes de scan
    console.group('üîå Test Providers Email Ultra-Enhanced');
    const emailMethods = window.categoryManager.checkEmailRetrievalMethods();
    console.log('M√©thodes disponibles:', emailMethods);
    
    const provider = window.categoryManager.detectEmailProvider();
    console.log('Provider d√©tect√©:', provider);
    console.groupEnd();
    
    console.groupEnd();
    return { 
        success: true, 
        testsRun: tests.length,
        canScan: emailMethods.available,
        provider: provider?.type || null,
        newsletterDetectionUltraEnhanced: true,
        version: 'v25.0-ULTRA-ENHANCED'
    };
};

window.debugCategoryKeywordsUltraEnhanced = function() {
    console.group('üîç DEBUG Mots-cl√©s v25.0 - Newsletter ULTRA-ENHANCED');
    const catalog = window.categoryManager.keywordCatalog;
    
    // Afficher marketing en premier avec tous les d√©tails
    if (catalog.marketing_news) {
        const keywords = catalog.marketing_news;
        const total = (keywords.absolute?.length || 0) + (keywords.strong?.length || 0) + 
                     (keywords.weak?.length || 0) + (keywords.exclusions?.length || 0);
        
        console.log(`üì∞ Marketing & News (ULTRA-ENHANCED): ${total} mots-cl√©s`);
        
        if (keywords.absolute?.length) {
            console.log(`\nüî• ABSOLUS (${keywords.absolute.length}):`);
            console.log('  D√©sabonnement:', keywords.absolute.filter(k => k.includes('d√©sabonner') || k.includes('unsubscribe')).slice(0, 10));
            console.log('  Newsletter:', keywords.absolute.filter(k => k.includes('newsletter') || k.includes('bulletin')).slice(0, 10));
            console.log('  Domaines:', keywords.absolute.filter(k => k.includes('.com') || k.includes('noreply')).slice(0, 10));
            console.log('  Services:', keywords.absolute.filter(k => k.includes('google') || k.includes('twitch') || k.includes('cloud')).slice(0, 10));
        }
        
        if (keywords.strong?.length) {
            console.log(`\nüí™ FORTS (${keywords.strong.length}):`, keywords.strong.slice(0, 15).join(', '));
        }
        
        if (keywords.weak?.length) {
            console.log(`\nüìù FAIBLES (${keywords.weak.length}):`, keywords.weak.slice(0, 10).join(', '));
        }
        
        if (keywords.exclusions?.length) {
            console.log(`\nüö´ EXCLUSIONS (${keywords.exclusions.length}):`, keywords.exclusions.join(', '));
        }
    }
    
    console.log('\n=== AUTRES CAT√âGORIES ===');
    Object.entries(catalog).forEach(([categoryId, keywords]) => {
        if (categoryId === 'marketing_news') return; // D√©j√† affich√©
        
        const category = window.categoryManager.getCategory(categoryId);
        const total = (keywords.absolute?.length || 0) + (keywords.strong?.length || 0) + 
                     (keywords.weak?.length || 0) + (keywords.exclusions?.length || 0);
        
        if (total > 0) {
            console.log(`\n${category?.icon || 'üìÇ'} ${category?.name || categoryId} (priorit√©: ${category?.priority || 0}): ${total} mots-cl√©s`);
            if (keywords.absolute?.length) console.log(`  Absolus: ${keywords.absolute.slice(0, 5).join(', ')}...`);
            if (keywords.strong?.length) console.log(`  Forts: ${keywords.strong.slice(0, 5).join(', ')}...`);
        }
    });
    
    console.groupEnd();
};

// Test sp√©cialis√© pour les exemples fournis
window.testSpecificExamples = function() {
    console.group('üß™ TEST Exemples Sp√©cifiques');
    
    const examples = [
        {
            subject: "Confirmation : votre essai de Google Cloud Platform",
            from: "CloudPlatform-noreply@google.com",
            body: "Bienvenue sur Google Cloud ! Suivez ce tutoriel pour apprendre les bases et d√©couvrez tout ce que vous pouvez faire sur GCP avec nos produits toujours gratuits.",
            expected: "marketing_news"
        },
        {
            subject: "RMCsport is live: RMC SPORT CLUB EP35 ! MERCATO : CROYEZ-VOUS TOUJOURS EN POGBA ?",
            from: "no-reply@twitch.tv",
            body: "newsletter Hey, vivlabinouze! RMCsport is live! You're receiving this email because you're a valued member of the Twitch community. To stop receiving emails about RMCsport, click here",
            expected: "marketing_news"
        },
        {
            subject: "Utilisez le code de s√É¬©curit√É¬© suivant pour le compte Microsoft",
            from: "account-security@microsoft.com", 
            body: "Code de s√É¬©curit√É¬©√Ç : 804472 Si vous ne reconnaissez pas le compte Microsoft, vous pouvez cliquer pour supprimer votre adresse e-mail de ce compte.",
            expected: "marketing_news" // Car contient des √©l√©ments marketing/notification
        }
    ];
    
    examples.forEach((example, index) => {
        console.log(`\n--- EXEMPLE ${index + 1} ---`);
        const result = window.categoryManager.testEmail(example.subject, example.body, example.from, example.expected);
        
        if (result.detectionDetails) {
            console.log('D√©tails de d√©tection:', result.detectionDetails);
        }
    });
    
    console.groupEnd();
};

console.log('‚úÖ CategoryManager v25.0 loaded - Newsletter Detection ULTRA-ENHANCED avec gestion encodage + affichage corrig√©');
console.log('üî• Priorit√© ABSOLUE pour newsletters avec seuils ultra-permissifs');
console.log('üìß Utilisez testCategoryManagerUltraEnhanced() pour tester');
console.log('üìß Utilisez debugCategoryKeywordsUltraEnhanced() pour voir les mots-cl√©s');
console.log('üìß Utilisez testSpecificExamples() pour tester les exemples sp√©cifiques');
